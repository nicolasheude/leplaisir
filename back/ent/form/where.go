// Code generated by entc, DO NOT EDIT.

package form

import (
	"dechild/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Nom applies equality check predicate on the "Nom" field. It's identical to NomEQ.
func Nom(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNom), v))
	})
}

// Prenom applies equality check predicate on the "Prenom" field. It's identical to PrenomEQ.
func Prenom(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrenom), v))
	})
}

// Anniversaire applies equality check predicate on the "Anniversaire" field. It's identical to AnniversaireEQ.
func Anniversaire(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnniversaire), v))
	})
}

// Nationalite applies equality check predicate on the "Nationalite" field. It's identical to NationaliteEQ.
func Nationalite(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNationalite), v))
	})
}

// Sexe applies equality check predicate on the "Sexe" field. It's identical to SexeEQ.
func Sexe(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSexe), v))
	})
}

// Niveau applies equality check predicate on the "Niveau" field. It's identical to NiveauEQ.
func Niveau(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNiveau), v))
	})
}

// FFT applies equality check predicate on the "FFT" field. It's identical to FFTEQ.
func FFT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFFT), v))
	})
}

// LocationR applies equality check predicate on the "LocationR" field. It's identical to LocationREQ.
func LocationR(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationR), v))
	})
}

// Repas applies equality check predicate on the "Repas" field. It's identical to RepasEQ.
func Repas(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepas), v))
	})
}

// Formule applies equality check predicate on the "Formule" field. It's identical to FormuleEQ.
func Formule(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormule), v))
	})
}

// Semaine applies equality check predicate on the "Semaine" field. It's identical to SemaineEQ.
func Semaine(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemaine), v))
	})
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// NomEQ applies the EQ predicate on the "Nom" field.
func NomEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNom), v))
	})
}

// NomNEQ applies the NEQ predicate on the "Nom" field.
func NomNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNom), v))
	})
}

// NomIn applies the In predicate on the "Nom" field.
func NomIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNom), v...))
	})
}

// NomNotIn applies the NotIn predicate on the "Nom" field.
func NomNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNom), v...))
	})
}

// NomGT applies the GT predicate on the "Nom" field.
func NomGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNom), v))
	})
}

// NomGTE applies the GTE predicate on the "Nom" field.
func NomGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNom), v))
	})
}

// NomLT applies the LT predicate on the "Nom" field.
func NomLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNom), v))
	})
}

// NomLTE applies the LTE predicate on the "Nom" field.
func NomLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNom), v))
	})
}

// NomContains applies the Contains predicate on the "Nom" field.
func NomContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNom), v))
	})
}

// NomHasPrefix applies the HasPrefix predicate on the "Nom" field.
func NomHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNom), v))
	})
}

// NomHasSuffix applies the HasSuffix predicate on the "Nom" field.
func NomHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNom), v))
	})
}

// NomEqualFold applies the EqualFold predicate on the "Nom" field.
func NomEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNom), v))
	})
}

// NomContainsFold applies the ContainsFold predicate on the "Nom" field.
func NomContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNom), v))
	})
}

// PrenomEQ applies the EQ predicate on the "Prenom" field.
func PrenomEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrenom), v))
	})
}

// PrenomNEQ applies the NEQ predicate on the "Prenom" field.
func PrenomNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrenom), v))
	})
}

// PrenomIn applies the In predicate on the "Prenom" field.
func PrenomIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrenom), v...))
	})
}

// PrenomNotIn applies the NotIn predicate on the "Prenom" field.
func PrenomNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrenom), v...))
	})
}

// PrenomGT applies the GT predicate on the "Prenom" field.
func PrenomGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrenom), v))
	})
}

// PrenomGTE applies the GTE predicate on the "Prenom" field.
func PrenomGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrenom), v))
	})
}

// PrenomLT applies the LT predicate on the "Prenom" field.
func PrenomLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrenom), v))
	})
}

// PrenomLTE applies the LTE predicate on the "Prenom" field.
func PrenomLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrenom), v))
	})
}

// PrenomContains applies the Contains predicate on the "Prenom" field.
func PrenomContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrenom), v))
	})
}

// PrenomHasPrefix applies the HasPrefix predicate on the "Prenom" field.
func PrenomHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrenom), v))
	})
}

// PrenomHasSuffix applies the HasSuffix predicate on the "Prenom" field.
func PrenomHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrenom), v))
	})
}

// PrenomEqualFold applies the EqualFold predicate on the "Prenom" field.
func PrenomEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrenom), v))
	})
}

// PrenomContainsFold applies the ContainsFold predicate on the "Prenom" field.
func PrenomContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrenom), v))
	})
}

// AnniversaireEQ applies the EQ predicate on the "Anniversaire" field.
func AnniversaireEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireNEQ applies the NEQ predicate on the "Anniversaire" field.
func AnniversaireNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireIn applies the In predicate on the "Anniversaire" field.
func AnniversaireIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnniversaire), v...))
	})
}

// AnniversaireNotIn applies the NotIn predicate on the "Anniversaire" field.
func AnniversaireNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnniversaire), v...))
	})
}

// AnniversaireGT applies the GT predicate on the "Anniversaire" field.
func AnniversaireGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireGTE applies the GTE predicate on the "Anniversaire" field.
func AnniversaireGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireLT applies the LT predicate on the "Anniversaire" field.
func AnniversaireLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireLTE applies the LTE predicate on the "Anniversaire" field.
func AnniversaireLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireContains applies the Contains predicate on the "Anniversaire" field.
func AnniversaireContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireHasPrefix applies the HasPrefix predicate on the "Anniversaire" field.
func AnniversaireHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireHasSuffix applies the HasSuffix predicate on the "Anniversaire" field.
func AnniversaireHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireEqualFold applies the EqualFold predicate on the "Anniversaire" field.
func AnniversaireEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnniversaire), v))
	})
}

// AnniversaireContainsFold applies the ContainsFold predicate on the "Anniversaire" field.
func AnniversaireContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnniversaire), v))
	})
}

// NationaliteEQ applies the EQ predicate on the "Nationalite" field.
func NationaliteEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNationalite), v))
	})
}

// NationaliteNEQ applies the NEQ predicate on the "Nationalite" field.
func NationaliteNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNationalite), v))
	})
}

// NationaliteIn applies the In predicate on the "Nationalite" field.
func NationaliteIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNationalite), v...))
	})
}

// NationaliteNotIn applies the NotIn predicate on the "Nationalite" field.
func NationaliteNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNationalite), v...))
	})
}

// NationaliteGT applies the GT predicate on the "Nationalite" field.
func NationaliteGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNationalite), v))
	})
}

// NationaliteGTE applies the GTE predicate on the "Nationalite" field.
func NationaliteGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNationalite), v))
	})
}

// NationaliteLT applies the LT predicate on the "Nationalite" field.
func NationaliteLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNationalite), v))
	})
}

// NationaliteLTE applies the LTE predicate on the "Nationalite" field.
func NationaliteLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNationalite), v))
	})
}

// NationaliteContains applies the Contains predicate on the "Nationalite" field.
func NationaliteContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNationalite), v))
	})
}

// NationaliteHasPrefix applies the HasPrefix predicate on the "Nationalite" field.
func NationaliteHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNationalite), v))
	})
}

// NationaliteHasSuffix applies the HasSuffix predicate on the "Nationalite" field.
func NationaliteHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNationalite), v))
	})
}

// NationaliteEqualFold applies the EqualFold predicate on the "Nationalite" field.
func NationaliteEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNationalite), v))
	})
}

// NationaliteContainsFold applies the ContainsFold predicate on the "Nationalite" field.
func NationaliteContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNationalite), v))
	})
}

// SexeEQ applies the EQ predicate on the "Sexe" field.
func SexeEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSexe), v))
	})
}

// SexeNEQ applies the NEQ predicate on the "Sexe" field.
func SexeNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSexe), v))
	})
}

// SexeIn applies the In predicate on the "Sexe" field.
func SexeIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSexe), v...))
	})
}

// SexeNotIn applies the NotIn predicate on the "Sexe" field.
func SexeNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSexe), v...))
	})
}

// SexeGT applies the GT predicate on the "Sexe" field.
func SexeGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSexe), v))
	})
}

// SexeGTE applies the GTE predicate on the "Sexe" field.
func SexeGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSexe), v))
	})
}

// SexeLT applies the LT predicate on the "Sexe" field.
func SexeLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSexe), v))
	})
}

// SexeLTE applies the LTE predicate on the "Sexe" field.
func SexeLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSexe), v))
	})
}

// SexeContains applies the Contains predicate on the "Sexe" field.
func SexeContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSexe), v))
	})
}

// SexeHasPrefix applies the HasPrefix predicate on the "Sexe" field.
func SexeHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSexe), v))
	})
}

// SexeHasSuffix applies the HasSuffix predicate on the "Sexe" field.
func SexeHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSexe), v))
	})
}

// SexeEqualFold applies the EqualFold predicate on the "Sexe" field.
func SexeEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSexe), v))
	})
}

// SexeContainsFold applies the ContainsFold predicate on the "Sexe" field.
func SexeContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSexe), v))
	})
}

// NiveauEQ applies the EQ predicate on the "Niveau" field.
func NiveauEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNiveau), v))
	})
}

// NiveauNEQ applies the NEQ predicate on the "Niveau" field.
func NiveauNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNiveau), v))
	})
}

// NiveauIn applies the In predicate on the "Niveau" field.
func NiveauIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNiveau), v...))
	})
}

// NiveauNotIn applies the NotIn predicate on the "Niveau" field.
func NiveauNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNiveau), v...))
	})
}

// NiveauGT applies the GT predicate on the "Niveau" field.
func NiveauGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNiveau), v))
	})
}

// NiveauGTE applies the GTE predicate on the "Niveau" field.
func NiveauGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNiveau), v))
	})
}

// NiveauLT applies the LT predicate on the "Niveau" field.
func NiveauLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNiveau), v))
	})
}

// NiveauLTE applies the LTE predicate on the "Niveau" field.
func NiveauLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNiveau), v))
	})
}

// NiveauContains applies the Contains predicate on the "Niveau" field.
func NiveauContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNiveau), v))
	})
}

// NiveauHasPrefix applies the HasPrefix predicate on the "Niveau" field.
func NiveauHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNiveau), v))
	})
}

// NiveauHasSuffix applies the HasSuffix predicate on the "Niveau" field.
func NiveauHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNiveau), v))
	})
}

// NiveauEqualFold applies the EqualFold predicate on the "Niveau" field.
func NiveauEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNiveau), v))
	})
}

// NiveauContainsFold applies the ContainsFold predicate on the "Niveau" field.
func NiveauContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNiveau), v))
	})
}

// FFTEQ applies the EQ predicate on the "FFT" field.
func FFTEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFFT), v))
	})
}

// FFTNEQ applies the NEQ predicate on the "FFT" field.
func FFTNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFFT), v))
	})
}

// FFTIn applies the In predicate on the "FFT" field.
func FFTIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFFT), v...))
	})
}

// FFTNotIn applies the NotIn predicate on the "FFT" field.
func FFTNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFFT), v...))
	})
}

// FFTGT applies the GT predicate on the "FFT" field.
func FFTGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFFT), v))
	})
}

// FFTGTE applies the GTE predicate on the "FFT" field.
func FFTGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFFT), v))
	})
}

// FFTLT applies the LT predicate on the "FFT" field.
func FFTLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFFT), v))
	})
}

// FFTLTE applies the LTE predicate on the "FFT" field.
func FFTLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFFT), v))
	})
}

// FFTContains applies the Contains predicate on the "FFT" field.
func FFTContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFFT), v))
	})
}

// FFTHasPrefix applies the HasPrefix predicate on the "FFT" field.
func FFTHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFFT), v))
	})
}

// FFTHasSuffix applies the HasSuffix predicate on the "FFT" field.
func FFTHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFFT), v))
	})
}

// FFTEqualFold applies the EqualFold predicate on the "FFT" field.
func FFTEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFFT), v))
	})
}

// FFTContainsFold applies the ContainsFold predicate on the "FFT" field.
func FFTContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFFT), v))
	})
}

// LocationREQ applies the EQ predicate on the "LocationR" field.
func LocationREQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationR), v))
	})
}

// LocationRNEQ applies the NEQ predicate on the "LocationR" field.
func LocationRNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationR), v))
	})
}

// LocationRIn applies the In predicate on the "LocationR" field.
func LocationRIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocationR), v...))
	})
}

// LocationRNotIn applies the NotIn predicate on the "LocationR" field.
func LocationRNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocationR), v...))
	})
}

// LocationRGT applies the GT predicate on the "LocationR" field.
func LocationRGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationR), v))
	})
}

// LocationRGTE applies the GTE predicate on the "LocationR" field.
func LocationRGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationR), v))
	})
}

// LocationRLT applies the LT predicate on the "LocationR" field.
func LocationRLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationR), v))
	})
}

// LocationRLTE applies the LTE predicate on the "LocationR" field.
func LocationRLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationR), v))
	})
}

// LocationRContains applies the Contains predicate on the "LocationR" field.
func LocationRContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocationR), v))
	})
}

// LocationRHasPrefix applies the HasPrefix predicate on the "LocationR" field.
func LocationRHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocationR), v))
	})
}

// LocationRHasSuffix applies the HasSuffix predicate on the "LocationR" field.
func LocationRHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocationR), v))
	})
}

// LocationREqualFold applies the EqualFold predicate on the "LocationR" field.
func LocationREqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocationR), v))
	})
}

// LocationRContainsFold applies the ContainsFold predicate on the "LocationR" field.
func LocationRContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocationR), v))
	})
}

// RepasEQ applies the EQ predicate on the "Repas" field.
func RepasEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRepas), v))
	})
}

// RepasNEQ applies the NEQ predicate on the "Repas" field.
func RepasNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRepas), v))
	})
}

// RepasIn applies the In predicate on the "Repas" field.
func RepasIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRepas), v...))
	})
}

// RepasNotIn applies the NotIn predicate on the "Repas" field.
func RepasNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRepas), v...))
	})
}

// RepasGT applies the GT predicate on the "Repas" field.
func RepasGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRepas), v))
	})
}

// RepasGTE applies the GTE predicate on the "Repas" field.
func RepasGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRepas), v))
	})
}

// RepasLT applies the LT predicate on the "Repas" field.
func RepasLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRepas), v))
	})
}

// RepasLTE applies the LTE predicate on the "Repas" field.
func RepasLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRepas), v))
	})
}

// RepasContains applies the Contains predicate on the "Repas" field.
func RepasContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRepas), v))
	})
}

// RepasHasPrefix applies the HasPrefix predicate on the "Repas" field.
func RepasHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRepas), v))
	})
}

// RepasHasSuffix applies the HasSuffix predicate on the "Repas" field.
func RepasHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRepas), v))
	})
}

// RepasEqualFold applies the EqualFold predicate on the "Repas" field.
func RepasEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRepas), v))
	})
}

// RepasContainsFold applies the ContainsFold predicate on the "Repas" field.
func RepasContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRepas), v))
	})
}

// FormuleEQ applies the EQ predicate on the "Formule" field.
func FormuleEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormule), v))
	})
}

// FormuleNEQ applies the NEQ predicate on the "Formule" field.
func FormuleNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormule), v))
	})
}

// FormuleIn applies the In predicate on the "Formule" field.
func FormuleIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormule), v...))
	})
}

// FormuleNotIn applies the NotIn predicate on the "Formule" field.
func FormuleNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormule), v...))
	})
}

// FormuleGT applies the GT predicate on the "Formule" field.
func FormuleGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormule), v))
	})
}

// FormuleGTE applies the GTE predicate on the "Formule" field.
func FormuleGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormule), v))
	})
}

// FormuleLT applies the LT predicate on the "Formule" field.
func FormuleLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormule), v))
	})
}

// FormuleLTE applies the LTE predicate on the "Formule" field.
func FormuleLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormule), v))
	})
}

// FormuleContains applies the Contains predicate on the "Formule" field.
func FormuleContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormule), v))
	})
}

// FormuleHasPrefix applies the HasPrefix predicate on the "Formule" field.
func FormuleHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormule), v))
	})
}

// FormuleHasSuffix applies the HasSuffix predicate on the "Formule" field.
func FormuleHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormule), v))
	})
}

// FormuleEqualFold applies the EqualFold predicate on the "Formule" field.
func FormuleEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormule), v))
	})
}

// FormuleContainsFold applies the ContainsFold predicate on the "Formule" field.
func FormuleContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormule), v))
	})
}

// SemaineEQ applies the EQ predicate on the "Semaine" field.
func SemaineEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemaine), v))
	})
}

// SemaineNEQ applies the NEQ predicate on the "Semaine" field.
func SemaineNEQ(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSemaine), v))
	})
}

// SemaineIn applies the In predicate on the "Semaine" field.
func SemaineIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSemaine), v...))
	})
}

// SemaineNotIn applies the NotIn predicate on the "Semaine" field.
func SemaineNotIn(vs ...string) predicate.Form {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Form(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSemaine), v...))
	})
}

// SemaineGT applies the GT predicate on the "Semaine" field.
func SemaineGT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSemaine), v))
	})
}

// SemaineGTE applies the GTE predicate on the "Semaine" field.
func SemaineGTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSemaine), v))
	})
}

// SemaineLT applies the LT predicate on the "Semaine" field.
func SemaineLT(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSemaine), v))
	})
}

// SemaineLTE applies the LTE predicate on the "Semaine" field.
func SemaineLTE(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSemaine), v))
	})
}

// SemaineContains applies the Contains predicate on the "Semaine" field.
func SemaineContains(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSemaine), v))
	})
}

// SemaineHasPrefix applies the HasPrefix predicate on the "Semaine" field.
func SemaineHasPrefix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSemaine), v))
	})
}

// SemaineHasSuffix applies the HasSuffix predicate on the "Semaine" field.
func SemaineHasSuffix(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSemaine), v))
	})
}

// SemaineEqualFold applies the EqualFold predicate on the "Semaine" field.
func SemaineEqualFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSemaine), v))
	})
}

// SemaineContainsFold applies the ContainsFold predicate on the "Semaine" field.
func SemaineContainsFold(v string) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSemaine), v))
	})
}

// HasContactParents applies the HasEdge predicate on the "contactParents" edge.
func HasContactParents() predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContactParentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ContactParentsTable, ContactParentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactParentsWith applies the HasEdge predicate on the "contactParents" edge with a given conditions (other predicates).
func HasContactParentsWith(preds ...predicate.ContactParents) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContactParentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ContactParentsTable, ContactParentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Form) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Form) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Form) predicate.Form {
	return predicate.Form(func(s *sql.Selector) {
		p(s.Not())
	})
}
