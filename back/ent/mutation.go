// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dechild/ent/contactparents"
	"dechild/ent/form"
	"dechild/ent/predicate"
	"fmt"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContactParents = "ContactParents"
	TypeForm           = "Form"
	TypeStockManager   = "StockManager"
)

// ContactParentsMutation represents an operation that mutates the ContactParents nodes in the graph.
type ContactParentsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Nom          *string
	_Prenom       *string
	_Sexe         *string
	_Adresse      *string
	_Ville        *string
	_CP           *string
	_Email        *string
	_Tel1         *string
	_Tel2         *string
	clearedFields map[string]struct{}
	child         map[int]struct{}
	removedchild  map[int]struct{}
	clearedchild  bool
	done          bool
	oldValue      func(context.Context) (*ContactParents, error)
	predicates    []predicate.ContactParents
}

var _ ent.Mutation = (*ContactParentsMutation)(nil)

// contactparentsOption allows management of the mutation configuration using functional options.
type contactparentsOption func(*ContactParentsMutation)

// newContactParentsMutation creates new mutation for the ContactParents entity.
func newContactParentsMutation(c config, op Op, opts ...contactparentsOption) *ContactParentsMutation {
	m := &ContactParentsMutation{
		config:        c,
		op:            op,
		typ:           TypeContactParents,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContactParentsID sets the ID field of the mutation.
func withContactParentsID(id int) contactparentsOption {
	return func(m *ContactParentsMutation) {
		var (
			err   error
			once  sync.Once
			value *ContactParents
		)
		m.oldValue = func(ctx context.Context) (*ContactParents, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContactParents.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContactParents sets the old ContactParents of the mutation.
func withContactParents(node *ContactParents) contactparentsOption {
	return func(m *ContactParentsMutation) {
		m.oldValue = func(context.Context) (*ContactParents, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContactParentsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContactParentsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ContactParents entities.
func (m *ContactParentsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ContactParentsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNom sets the "Nom" field.
func (m *ContactParentsMutation) SetNom(s string) {
	m._Nom = &s
}

// Nom returns the value of the "Nom" field in the mutation.
func (m *ContactParentsMutation) Nom() (r string, exists bool) {
	v := m._Nom
	if v == nil {
		return
	}
	return *v, true
}

// OldNom returns the old "Nom" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldNom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNom: %w", err)
	}
	return oldValue.Nom, nil
}

// ResetNom resets all changes to the "Nom" field.
func (m *ContactParentsMutation) ResetNom() {
	m._Nom = nil
}

// SetPrenom sets the "Prenom" field.
func (m *ContactParentsMutation) SetPrenom(s string) {
	m._Prenom = &s
}

// Prenom returns the value of the "Prenom" field in the mutation.
func (m *ContactParentsMutation) Prenom() (r string, exists bool) {
	v := m._Prenom
	if v == nil {
		return
	}
	return *v, true
}

// OldPrenom returns the old "Prenom" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldPrenom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrenom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrenom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrenom: %w", err)
	}
	return oldValue.Prenom, nil
}

// ResetPrenom resets all changes to the "Prenom" field.
func (m *ContactParentsMutation) ResetPrenom() {
	m._Prenom = nil
}

// SetSexe sets the "Sexe" field.
func (m *ContactParentsMutation) SetSexe(s string) {
	m._Sexe = &s
}

// Sexe returns the value of the "Sexe" field in the mutation.
func (m *ContactParentsMutation) Sexe() (r string, exists bool) {
	v := m._Sexe
	if v == nil {
		return
	}
	return *v, true
}

// OldSexe returns the old "Sexe" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldSexe(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSexe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSexe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSexe: %w", err)
	}
	return oldValue.Sexe, nil
}

// ResetSexe resets all changes to the "Sexe" field.
func (m *ContactParentsMutation) ResetSexe() {
	m._Sexe = nil
}

// SetAdresse sets the "Adresse" field.
func (m *ContactParentsMutation) SetAdresse(s string) {
	m._Adresse = &s
}

// Adresse returns the value of the "Adresse" field in the mutation.
func (m *ContactParentsMutation) Adresse() (r string, exists bool) {
	v := m._Adresse
	if v == nil {
		return
	}
	return *v, true
}

// OldAdresse returns the old "Adresse" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldAdresse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdresse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdresse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdresse: %w", err)
	}
	return oldValue.Adresse, nil
}

// ResetAdresse resets all changes to the "Adresse" field.
func (m *ContactParentsMutation) ResetAdresse() {
	m._Adresse = nil
}

// SetVille sets the "Ville" field.
func (m *ContactParentsMutation) SetVille(s string) {
	m._Ville = &s
}

// Ville returns the value of the "Ville" field in the mutation.
func (m *ContactParentsMutation) Ville() (r string, exists bool) {
	v := m._Ville
	if v == nil {
		return
	}
	return *v, true
}

// OldVille returns the old "Ville" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldVille(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVille is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVille requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVille: %w", err)
	}
	return oldValue.Ville, nil
}

// ResetVille resets all changes to the "Ville" field.
func (m *ContactParentsMutation) ResetVille() {
	m._Ville = nil
}

// SetCP sets the "CP" field.
func (m *ContactParentsMutation) SetCP(s string) {
	m._CP = &s
}

// CP returns the value of the "CP" field in the mutation.
func (m *ContactParentsMutation) CP() (r string, exists bool) {
	v := m._CP
	if v == nil {
		return
	}
	return *v, true
}

// OldCP returns the old "CP" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldCP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCP: %w", err)
	}
	return oldValue.CP, nil
}

// ResetCP resets all changes to the "CP" field.
func (m *ContactParentsMutation) ResetCP() {
	m._CP = nil
}

// SetEmail sets the "Email" field.
func (m *ContactParentsMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *ContactParentsMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *ContactParentsMutation) ResetEmail() {
	m._Email = nil
}

// SetTel1 sets the "Tel1" field.
func (m *ContactParentsMutation) SetTel1(s string) {
	m._Tel1 = &s
}

// Tel1 returns the value of the "Tel1" field in the mutation.
func (m *ContactParentsMutation) Tel1() (r string, exists bool) {
	v := m._Tel1
	if v == nil {
		return
	}
	return *v, true
}

// OldTel1 returns the old "Tel1" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldTel1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel1: %w", err)
	}
	return oldValue.Tel1, nil
}

// ResetTel1 resets all changes to the "Tel1" field.
func (m *ContactParentsMutation) ResetTel1() {
	m._Tel1 = nil
}

// SetTel2 sets the "Tel2" field.
func (m *ContactParentsMutation) SetTel2(s string) {
	m._Tel2 = &s
}

// Tel2 returns the value of the "Tel2" field in the mutation.
func (m *ContactParentsMutation) Tel2() (r string, exists bool) {
	v := m._Tel2
	if v == nil {
		return
	}
	return *v, true
}

// OldTel2 returns the old "Tel2" field's value of the ContactParents entity.
// If the ContactParents object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactParentsMutation) OldTel2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel2: %w", err)
	}
	return oldValue.Tel2, nil
}

// ClearTel2 clears the value of the "Tel2" field.
func (m *ContactParentsMutation) ClearTel2() {
	m._Tel2 = nil
	m.clearedFields[contactparents.FieldTel2] = struct{}{}
}

// Tel2Cleared returns if the "Tel2" field was cleared in this mutation.
func (m *ContactParentsMutation) Tel2Cleared() bool {
	_, ok := m.clearedFields[contactparents.FieldTel2]
	return ok
}

// ResetTel2 resets all changes to the "Tel2" field.
func (m *ContactParentsMutation) ResetTel2() {
	m._Tel2 = nil
	delete(m.clearedFields, contactparents.FieldTel2)
}

// AddChildIDs adds the "child" edge to the Form entity by ids.
func (m *ContactParentsMutation) AddChildIDs(ids ...int) {
	if m.child == nil {
		m.child = make(map[int]struct{})
	}
	for i := range ids {
		m.child[ids[i]] = struct{}{}
	}
}

// ClearChild clears the "child" edge to the Form entity.
func (m *ContactParentsMutation) ClearChild() {
	m.clearedchild = true
}

// ChildCleared returns if the "child" edge to the Form entity was cleared.
func (m *ContactParentsMutation) ChildCleared() bool {
	return m.clearedchild
}

// RemoveChildIDs removes the "child" edge to the Form entity by IDs.
func (m *ContactParentsMutation) RemoveChildIDs(ids ...int) {
	if m.removedchild == nil {
		m.removedchild = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchild[ids[i]] = struct{}{}
	}
}

// RemovedChild returns the removed IDs of the "child" edge to the Form entity.
func (m *ContactParentsMutation) RemovedChildIDs() (ids []int) {
	for id := range m.removedchild {
		ids = append(ids, id)
	}
	return
}

// ChildIDs returns the "child" edge IDs in the mutation.
func (m *ContactParentsMutation) ChildIDs() (ids []int) {
	for id := range m.child {
		ids = append(ids, id)
	}
	return
}

// ResetChild resets all changes to the "child" edge.
func (m *ContactParentsMutation) ResetChild() {
	m.child = nil
	m.clearedchild = false
	m.removedchild = nil
}

// Op returns the operation name.
func (m *ContactParentsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ContactParents).
func (m *ContactParentsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContactParentsMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m._Nom != nil {
		fields = append(fields, contactparents.FieldNom)
	}
	if m._Prenom != nil {
		fields = append(fields, contactparents.FieldPrenom)
	}
	if m._Sexe != nil {
		fields = append(fields, contactparents.FieldSexe)
	}
	if m._Adresse != nil {
		fields = append(fields, contactparents.FieldAdresse)
	}
	if m._Ville != nil {
		fields = append(fields, contactparents.FieldVille)
	}
	if m._CP != nil {
		fields = append(fields, contactparents.FieldCP)
	}
	if m._Email != nil {
		fields = append(fields, contactparents.FieldEmail)
	}
	if m._Tel1 != nil {
		fields = append(fields, contactparents.FieldTel1)
	}
	if m._Tel2 != nil {
		fields = append(fields, contactparents.FieldTel2)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContactParentsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contactparents.FieldNom:
		return m.Nom()
	case contactparents.FieldPrenom:
		return m.Prenom()
	case contactparents.FieldSexe:
		return m.Sexe()
	case contactparents.FieldAdresse:
		return m.Adresse()
	case contactparents.FieldVille:
		return m.Ville()
	case contactparents.FieldCP:
		return m.CP()
	case contactparents.FieldEmail:
		return m.Email()
	case contactparents.FieldTel1:
		return m.Tel1()
	case contactparents.FieldTel2:
		return m.Tel2()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContactParentsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contactparents.FieldNom:
		return m.OldNom(ctx)
	case contactparents.FieldPrenom:
		return m.OldPrenom(ctx)
	case contactparents.FieldSexe:
		return m.OldSexe(ctx)
	case contactparents.FieldAdresse:
		return m.OldAdresse(ctx)
	case contactparents.FieldVille:
		return m.OldVille(ctx)
	case contactparents.FieldCP:
		return m.OldCP(ctx)
	case contactparents.FieldEmail:
		return m.OldEmail(ctx)
	case contactparents.FieldTel1:
		return m.OldTel1(ctx)
	case contactparents.FieldTel2:
		return m.OldTel2(ctx)
	}
	return nil, fmt.Errorf("unknown ContactParents field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactParentsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contactparents.FieldNom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNom(v)
		return nil
	case contactparents.FieldPrenom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrenom(v)
		return nil
	case contactparents.FieldSexe:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSexe(v)
		return nil
	case contactparents.FieldAdresse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdresse(v)
		return nil
	case contactparents.FieldVille:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVille(v)
		return nil
	case contactparents.FieldCP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCP(v)
		return nil
	case contactparents.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case contactparents.FieldTel1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel1(v)
		return nil
	case contactparents.FieldTel2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel2(v)
		return nil
	}
	return fmt.Errorf("unknown ContactParents field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContactParentsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContactParentsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactParentsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ContactParents numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContactParentsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contactparents.FieldTel2) {
		fields = append(fields, contactparents.FieldTel2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContactParentsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContactParentsMutation) ClearField(name string) error {
	switch name {
	case contactparents.FieldTel2:
		m.ClearTel2()
		return nil
	}
	return fmt.Errorf("unknown ContactParents nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContactParentsMutation) ResetField(name string) error {
	switch name {
	case contactparents.FieldNom:
		m.ResetNom()
		return nil
	case contactparents.FieldPrenom:
		m.ResetPrenom()
		return nil
	case contactparents.FieldSexe:
		m.ResetSexe()
		return nil
	case contactparents.FieldAdresse:
		m.ResetAdresse()
		return nil
	case contactparents.FieldVille:
		m.ResetVille()
		return nil
	case contactparents.FieldCP:
		m.ResetCP()
		return nil
	case contactparents.FieldEmail:
		m.ResetEmail()
		return nil
	case contactparents.FieldTel1:
		m.ResetTel1()
		return nil
	case contactparents.FieldTel2:
		m.ResetTel2()
		return nil
	}
	return fmt.Errorf("unknown ContactParents field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContactParentsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.child != nil {
		edges = append(edges, contactparents.EdgeChild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContactParentsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contactparents.EdgeChild:
		ids := make([]ent.Value, 0, len(m.child))
		for id := range m.child {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContactParentsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedchild != nil {
		edges = append(edges, contactparents.EdgeChild)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContactParentsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contactparents.EdgeChild:
		ids := make([]ent.Value, 0, len(m.removedchild))
		for id := range m.removedchild {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContactParentsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchild {
		edges = append(edges, contactparents.EdgeChild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContactParentsMutation) EdgeCleared(name string) bool {
	switch name {
	case contactparents.EdgeChild:
		return m.clearedchild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContactParentsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ContactParents unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContactParentsMutation) ResetEdge(name string) error {
	switch name {
	case contactparents.EdgeChild:
		m.ResetChild()
		return nil
	}
	return fmt.Errorf("unknown ContactParents edge %s", name)
}

// FormMutation represents an operation that mutates the Form nodes in the graph.
type FormMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Email                *string
	_Nom                  *string
	_Prenom               *string
	_Anniversaire         *string
	_Nationalite          *string
	_Sexe                 *string
	_Niveau               *string
	_FFT                  *string
	_LocationR            *string
	_Repas                *string
	_Formule              *string
	_Semaine              *string
	clearedFields         map[string]struct{}
	contactParents        *int
	clearedcontactParents bool
	done                  bool
	oldValue              func(context.Context) (*Form, error)
	predicates            []predicate.Form
}

var _ ent.Mutation = (*FormMutation)(nil)

// formOption allows management of the mutation configuration using functional options.
type formOption func(*FormMutation)

// newFormMutation creates new mutation for the Form entity.
func newFormMutation(c config, op Op, opts ...formOption) *FormMutation {
	m := &FormMutation{
		config:        c,
		op:            op,
		typ:           TypeForm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormID sets the ID field of the mutation.
func withFormID(id int) formOption {
	return func(m *FormMutation) {
		var (
			err   error
			once  sync.Once
			value *Form
		)
		m.oldValue = func(ctx context.Context) (*Form, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Form.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForm sets the old Form of the mutation.
func withForm(node *Form) formOption {
	return func(m *FormMutation) {
		m.oldValue = func(context.Context) (*Form, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Form entities.
func (m *FormMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *FormMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the "Email" field.
func (m *FormMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *FormMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *FormMutation) ResetEmail() {
	m._Email = nil
}

// SetNom sets the "Nom" field.
func (m *FormMutation) SetNom(s string) {
	m._Nom = &s
}

// Nom returns the value of the "Nom" field in the mutation.
func (m *FormMutation) Nom() (r string, exists bool) {
	v := m._Nom
	if v == nil {
		return
	}
	return *v, true
}

// OldNom returns the old "Nom" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldNom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNom: %w", err)
	}
	return oldValue.Nom, nil
}

// ResetNom resets all changes to the "Nom" field.
func (m *FormMutation) ResetNom() {
	m._Nom = nil
}

// SetPrenom sets the "Prenom" field.
func (m *FormMutation) SetPrenom(s string) {
	m._Prenom = &s
}

// Prenom returns the value of the "Prenom" field in the mutation.
func (m *FormMutation) Prenom() (r string, exists bool) {
	v := m._Prenom
	if v == nil {
		return
	}
	return *v, true
}

// OldPrenom returns the old "Prenom" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldPrenom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrenom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrenom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrenom: %w", err)
	}
	return oldValue.Prenom, nil
}

// ResetPrenom resets all changes to the "Prenom" field.
func (m *FormMutation) ResetPrenom() {
	m._Prenom = nil
}

// SetAnniversaire sets the "Anniversaire" field.
func (m *FormMutation) SetAnniversaire(s string) {
	m._Anniversaire = &s
}

// Anniversaire returns the value of the "Anniversaire" field in the mutation.
func (m *FormMutation) Anniversaire() (r string, exists bool) {
	v := m._Anniversaire
	if v == nil {
		return
	}
	return *v, true
}

// OldAnniversaire returns the old "Anniversaire" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldAnniversaire(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAnniversaire is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAnniversaire requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnniversaire: %w", err)
	}
	return oldValue.Anniversaire, nil
}

// ResetAnniversaire resets all changes to the "Anniversaire" field.
func (m *FormMutation) ResetAnniversaire() {
	m._Anniversaire = nil
}

// SetNationalite sets the "Nationalite" field.
func (m *FormMutation) SetNationalite(s string) {
	m._Nationalite = &s
}

// Nationalite returns the value of the "Nationalite" field in the mutation.
func (m *FormMutation) Nationalite() (r string, exists bool) {
	v := m._Nationalite
	if v == nil {
		return
	}
	return *v, true
}

// OldNationalite returns the old "Nationalite" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldNationalite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNationalite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNationalite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNationalite: %w", err)
	}
	return oldValue.Nationalite, nil
}

// ResetNationalite resets all changes to the "Nationalite" field.
func (m *FormMutation) ResetNationalite() {
	m._Nationalite = nil
}

// SetSexe sets the "Sexe" field.
func (m *FormMutation) SetSexe(s string) {
	m._Sexe = &s
}

// Sexe returns the value of the "Sexe" field in the mutation.
func (m *FormMutation) Sexe() (r string, exists bool) {
	v := m._Sexe
	if v == nil {
		return
	}
	return *v, true
}

// OldSexe returns the old "Sexe" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldSexe(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSexe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSexe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSexe: %w", err)
	}
	return oldValue.Sexe, nil
}

// ResetSexe resets all changes to the "Sexe" field.
func (m *FormMutation) ResetSexe() {
	m._Sexe = nil
}

// SetNiveau sets the "Niveau" field.
func (m *FormMutation) SetNiveau(s string) {
	m._Niveau = &s
}

// Niveau returns the value of the "Niveau" field in the mutation.
func (m *FormMutation) Niveau() (r string, exists bool) {
	v := m._Niveau
	if v == nil {
		return
	}
	return *v, true
}

// OldNiveau returns the old "Niveau" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldNiveau(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNiveau is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNiveau requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNiveau: %w", err)
	}
	return oldValue.Niveau, nil
}

// ResetNiveau resets all changes to the "Niveau" field.
func (m *FormMutation) ResetNiveau() {
	m._Niveau = nil
}

// SetFFT sets the "FFT" field.
func (m *FormMutation) SetFFT(s string) {
	m._FFT = &s
}

// FFT returns the value of the "FFT" field in the mutation.
func (m *FormMutation) FFT() (r string, exists bool) {
	v := m._FFT
	if v == nil {
		return
	}
	return *v, true
}

// OldFFT returns the old "FFT" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldFFT(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFFT is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFFT requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFFT: %w", err)
	}
	return oldValue.FFT, nil
}

// ResetFFT resets all changes to the "FFT" field.
func (m *FormMutation) ResetFFT() {
	m._FFT = nil
}

// SetLocationR sets the "LocationR" field.
func (m *FormMutation) SetLocationR(s string) {
	m._LocationR = &s
}

// LocationR returns the value of the "LocationR" field in the mutation.
func (m *FormMutation) LocationR() (r string, exists bool) {
	v := m._LocationR
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationR returns the old "LocationR" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldLocationR(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocationR is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocationR requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationR: %w", err)
	}
	return oldValue.LocationR, nil
}

// ResetLocationR resets all changes to the "LocationR" field.
func (m *FormMutation) ResetLocationR() {
	m._LocationR = nil
}

// SetRepas sets the "Repas" field.
func (m *FormMutation) SetRepas(s string) {
	m._Repas = &s
}

// Repas returns the value of the "Repas" field in the mutation.
func (m *FormMutation) Repas() (r string, exists bool) {
	v := m._Repas
	if v == nil {
		return
	}
	return *v, true
}

// OldRepas returns the old "Repas" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldRepas(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRepas is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRepas requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRepas: %w", err)
	}
	return oldValue.Repas, nil
}

// ResetRepas resets all changes to the "Repas" field.
func (m *FormMutation) ResetRepas() {
	m._Repas = nil
}

// SetFormule sets the "Formule" field.
func (m *FormMutation) SetFormule(s string) {
	m._Formule = &s
}

// Formule returns the value of the "Formule" field in the mutation.
func (m *FormMutation) Formule() (r string, exists bool) {
	v := m._Formule
	if v == nil {
		return
	}
	return *v, true
}

// OldFormule returns the old "Formule" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldFormule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFormule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFormule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormule: %w", err)
	}
	return oldValue.Formule, nil
}

// ResetFormule resets all changes to the "Formule" field.
func (m *FormMutation) ResetFormule() {
	m._Formule = nil
}

// SetSemaine sets the "Semaine" field.
func (m *FormMutation) SetSemaine(s string) {
	m._Semaine = &s
}

// Semaine returns the value of the "Semaine" field in the mutation.
func (m *FormMutation) Semaine() (r string, exists bool) {
	v := m._Semaine
	if v == nil {
		return
	}
	return *v, true
}

// OldSemaine returns the old "Semaine" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldSemaine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSemaine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSemaine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSemaine: %w", err)
	}
	return oldValue.Semaine, nil
}

// ResetSemaine resets all changes to the "Semaine" field.
func (m *FormMutation) ResetSemaine() {
	m._Semaine = nil
}

// SetContactParentsID sets the "contactParents" edge to the ContactParents entity by id.
func (m *FormMutation) SetContactParentsID(id int) {
	m.contactParents = &id
}

// ClearContactParents clears the "contactParents" edge to the ContactParents entity.
func (m *FormMutation) ClearContactParents() {
	m.clearedcontactParents = true
}

// ContactParentsCleared returns if the "contactParents" edge to the ContactParents entity was cleared.
func (m *FormMutation) ContactParentsCleared() bool {
	return m.clearedcontactParents
}

// ContactParentsID returns the "contactParents" edge ID in the mutation.
func (m *FormMutation) ContactParentsID() (id int, exists bool) {
	if m.contactParents != nil {
		return *m.contactParents, true
	}
	return
}

// ContactParentsIDs returns the "contactParents" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactParentsID instead. It exists only for internal usage by the builders.
func (m *FormMutation) ContactParentsIDs() (ids []int) {
	if id := m.contactParents; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContactParents resets all changes to the "contactParents" edge.
func (m *FormMutation) ResetContactParents() {
	m.contactParents = nil
	m.clearedcontactParents = false
}

// Op returns the operation name.
func (m *FormMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Form).
func (m *FormMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m._Email != nil {
		fields = append(fields, form.FieldEmail)
	}
	if m._Nom != nil {
		fields = append(fields, form.FieldNom)
	}
	if m._Prenom != nil {
		fields = append(fields, form.FieldPrenom)
	}
	if m._Anniversaire != nil {
		fields = append(fields, form.FieldAnniversaire)
	}
	if m._Nationalite != nil {
		fields = append(fields, form.FieldNationalite)
	}
	if m._Sexe != nil {
		fields = append(fields, form.FieldSexe)
	}
	if m._Niveau != nil {
		fields = append(fields, form.FieldNiveau)
	}
	if m._FFT != nil {
		fields = append(fields, form.FieldFFT)
	}
	if m._LocationR != nil {
		fields = append(fields, form.FieldLocationR)
	}
	if m._Repas != nil {
		fields = append(fields, form.FieldRepas)
	}
	if m._Formule != nil {
		fields = append(fields, form.FieldFormule)
	}
	if m._Semaine != nil {
		fields = append(fields, form.FieldSemaine)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case form.FieldEmail:
		return m.Email()
	case form.FieldNom:
		return m.Nom()
	case form.FieldPrenom:
		return m.Prenom()
	case form.FieldAnniversaire:
		return m.Anniversaire()
	case form.FieldNationalite:
		return m.Nationalite()
	case form.FieldSexe:
		return m.Sexe()
	case form.FieldNiveau:
		return m.Niveau()
	case form.FieldFFT:
		return m.FFT()
	case form.FieldLocationR:
		return m.LocationR()
	case form.FieldRepas:
		return m.Repas()
	case form.FieldFormule:
		return m.Formule()
	case form.FieldSemaine:
		return m.Semaine()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case form.FieldEmail:
		return m.OldEmail(ctx)
	case form.FieldNom:
		return m.OldNom(ctx)
	case form.FieldPrenom:
		return m.OldPrenom(ctx)
	case form.FieldAnniversaire:
		return m.OldAnniversaire(ctx)
	case form.FieldNationalite:
		return m.OldNationalite(ctx)
	case form.FieldSexe:
		return m.OldSexe(ctx)
	case form.FieldNiveau:
		return m.OldNiveau(ctx)
	case form.FieldFFT:
		return m.OldFFT(ctx)
	case form.FieldLocationR:
		return m.OldLocationR(ctx)
	case form.FieldRepas:
		return m.OldRepas(ctx)
	case form.FieldFormule:
		return m.OldFormule(ctx)
	case form.FieldSemaine:
		return m.OldSemaine(ctx)
	}
	return nil, fmt.Errorf("unknown Form field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) SetField(name string, value ent.Value) error {
	switch name {
	case form.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case form.FieldNom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNom(v)
		return nil
	case form.FieldPrenom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrenom(v)
		return nil
	case form.FieldAnniversaire:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnniversaire(v)
		return nil
	case form.FieldNationalite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNationalite(v)
		return nil
	case form.FieldSexe:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSexe(v)
		return nil
	case form.FieldNiveau:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNiveau(v)
		return nil
	case form.FieldFFT:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFFT(v)
		return nil
	case form.FieldLocationR:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationR(v)
		return nil
	case form.FieldRepas:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRepas(v)
		return nil
	case form.FieldFormule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormule(v)
		return nil
	case form.FieldSemaine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSemaine(v)
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Form numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Form nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormMutation) ResetField(name string) error {
	switch name {
	case form.FieldEmail:
		m.ResetEmail()
		return nil
	case form.FieldNom:
		m.ResetNom()
		return nil
	case form.FieldPrenom:
		m.ResetPrenom()
		return nil
	case form.FieldAnniversaire:
		m.ResetAnniversaire()
		return nil
	case form.FieldNationalite:
		m.ResetNationalite()
		return nil
	case form.FieldSexe:
		m.ResetSexe()
		return nil
	case form.FieldNiveau:
		m.ResetNiveau()
		return nil
	case form.FieldFFT:
		m.ResetFFT()
		return nil
	case form.FieldLocationR:
		m.ResetLocationR()
		return nil
	case form.FieldRepas:
		m.ResetRepas()
		return nil
	case form.FieldFormule:
		m.ResetFormule()
		return nil
	case form.FieldSemaine:
		m.ResetSemaine()
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contactParents != nil {
		edges = append(edges, form.EdgeContactParents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case form.EdgeContactParents:
		if id := m.contactParents; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontactParents {
		edges = append(edges, form.EdgeContactParents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormMutation) EdgeCleared(name string) bool {
	switch name {
	case form.EdgeContactParents:
		return m.clearedcontactParents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormMutation) ClearEdge(name string) error {
	switch name {
	case form.EdgeContactParents:
		m.ClearContactParents()
		return nil
	}
	return fmt.Errorf("unknown Form unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormMutation) ResetEdge(name string) error {
	switch name {
	case form.EdgeContactParents:
		m.ResetContactParents()
		return nil
	}
	return fmt.Errorf("unknown Form edge %s", name)
}

// StockManagerMutation represents an operation that mutates the StockManager nodes in the graph.
type StockManagerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*StockManager, error)
	predicates    []predicate.StockManager
}

var _ ent.Mutation = (*StockManagerMutation)(nil)

// stockmanagerOption allows management of the mutation configuration using functional options.
type stockmanagerOption func(*StockManagerMutation)

// newStockManagerMutation creates new mutation for the StockManager entity.
func newStockManagerMutation(c config, op Op, opts ...stockmanagerOption) *StockManagerMutation {
	m := &StockManagerMutation{
		config:        c,
		op:            op,
		typ:           TypeStockManager,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStockManagerID sets the ID field of the mutation.
func withStockManagerID(id int) stockmanagerOption {
	return func(m *StockManagerMutation) {
		var (
			err   error
			once  sync.Once
			value *StockManager
		)
		m.oldValue = func(ctx context.Context) (*StockManager, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StockManager.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStockManager sets the old StockManager of the mutation.
func withStockManager(node *StockManager) stockmanagerOption {
	return func(m *StockManagerMutation) {
		m.oldValue = func(context.Context) (*StockManager, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StockManagerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StockManagerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *StockManagerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Op returns the operation name.
func (m *StockManagerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StockManager).
func (m *StockManagerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StockManagerMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StockManagerMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StockManagerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown StockManager field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockManagerMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StockManager field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StockManagerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StockManagerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockManagerMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown StockManager numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StockManagerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StockManagerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StockManagerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StockManager nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StockManagerMutation) ResetField(name string) error {
	return fmt.Errorf("unknown StockManager field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StockManagerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StockManagerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StockManagerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StockManagerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StockManagerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StockManagerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StockManagerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StockManager unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StockManagerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StockManager edge %s", name)
}
