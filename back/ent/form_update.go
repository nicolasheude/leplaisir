// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dechild/ent/contactparents"
	"dechild/ent/form"
	"dechild/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormUpdate is the builder for updating Form entities.
type FormUpdate struct {
	config
	hooks    []Hook
	mutation *FormMutation
}

// Where adds a new predicate for the FormUpdate builder.
func (fu *FormUpdate) Where(ps ...predicate.Form) *FormUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetEmail sets the "Email" field.
func (fu *FormUpdate) SetEmail(s string) *FormUpdate {
	fu.mutation.SetEmail(s)
	return fu
}

// SetNom sets the "Nom" field.
func (fu *FormUpdate) SetNom(s string) *FormUpdate {
	fu.mutation.SetNom(s)
	return fu
}

// SetPrenom sets the "Prenom" field.
func (fu *FormUpdate) SetPrenom(s string) *FormUpdate {
	fu.mutation.SetPrenom(s)
	return fu
}

// SetAnniversaire sets the "Anniversaire" field.
func (fu *FormUpdate) SetAnniversaire(s string) *FormUpdate {
	fu.mutation.SetAnniversaire(s)
	return fu
}

// SetNationalite sets the "Nationalite" field.
func (fu *FormUpdate) SetNationalite(s string) *FormUpdate {
	fu.mutation.SetNationalite(s)
	return fu
}

// SetSexe sets the "Sexe" field.
func (fu *FormUpdate) SetSexe(s string) *FormUpdate {
	fu.mutation.SetSexe(s)
	return fu
}

// SetNiveau sets the "Niveau" field.
func (fu *FormUpdate) SetNiveau(s string) *FormUpdate {
	fu.mutation.SetNiveau(s)
	return fu
}

// SetFFT sets the "FFT" field.
func (fu *FormUpdate) SetFFT(s string) *FormUpdate {
	fu.mutation.SetFFT(s)
	return fu
}

// SetLocationR sets the "LocationR" field.
func (fu *FormUpdate) SetLocationR(s string) *FormUpdate {
	fu.mutation.SetLocationR(s)
	return fu
}

// SetRepas sets the "Repas" field.
func (fu *FormUpdate) SetRepas(s string) *FormUpdate {
	fu.mutation.SetRepas(s)
	return fu
}

// SetFormule sets the "Formule" field.
func (fu *FormUpdate) SetFormule(s string) *FormUpdate {
	fu.mutation.SetFormule(s)
	return fu
}

// SetSemaine sets the "Semaine" field.
func (fu *FormUpdate) SetSemaine(s string) *FormUpdate {
	fu.mutation.SetSemaine(s)
	return fu
}

// SetContactParentsID sets the "contactParents" edge to the ContactParents entity by ID.
func (fu *FormUpdate) SetContactParentsID(id int) *FormUpdate {
	fu.mutation.SetContactParentsID(id)
	return fu
}

// SetNillableContactParentsID sets the "contactParents" edge to the ContactParents entity by ID if the given value is not nil.
func (fu *FormUpdate) SetNillableContactParentsID(id *int) *FormUpdate {
	if id != nil {
		fu = fu.SetContactParentsID(*id)
	}
	return fu
}

// SetContactParents sets the "contactParents" edge to the ContactParents entity.
func (fu *FormUpdate) SetContactParents(c *ContactParents) *FormUpdate {
	return fu.SetContactParentsID(c.ID)
}

// Mutation returns the FormMutation object of the builder.
func (fu *FormUpdate) Mutation() *FormMutation {
	return fu.mutation
}

// ClearContactParents clears the "contactParents" edge to the ContactParents entity.
func (fu *FormUpdate) ClearContactParents() *FormUpdate {
	fu.mutation.ClearContactParents()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FormUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FormUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FormUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FormUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FormUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   form.Table,
			Columns: form.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: form.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldEmail,
		})
	}
	if value, ok := fu.mutation.Nom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNom,
		})
	}
	if value, ok := fu.mutation.Prenom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldPrenom,
		})
	}
	if value, ok := fu.mutation.Anniversaire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldAnniversaire,
		})
	}
	if value, ok := fu.mutation.Nationalite(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNationalite,
		})
	}
	if value, ok := fu.mutation.Sexe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSexe,
		})
	}
	if value, ok := fu.mutation.Niveau(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNiveau,
		})
	}
	if value, ok := fu.mutation.FFT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFFT,
		})
	}
	if value, ok := fu.mutation.LocationR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldLocationR,
		})
	}
	if value, ok := fu.mutation.Repas(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldRepas,
		})
	}
	if value, ok := fu.mutation.Formule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFormule,
		})
	}
	if value, ok := fu.mutation.Semaine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSemaine,
		})
	}
	if fu.mutation.ContactParentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   form.ContactParentsTable,
			Columns: []string{form.ContactParentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactparents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ContactParentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   form.ContactParentsTable,
			Columns: []string{form.ContactParentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactparents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FormUpdateOne is the builder for updating a single Form entity.
type FormUpdateOne struct {
	config
	hooks    []Hook
	mutation *FormMutation
}

// SetEmail sets the "Email" field.
func (fuo *FormUpdateOne) SetEmail(s string) *FormUpdateOne {
	fuo.mutation.SetEmail(s)
	return fuo
}

// SetNom sets the "Nom" field.
func (fuo *FormUpdateOne) SetNom(s string) *FormUpdateOne {
	fuo.mutation.SetNom(s)
	return fuo
}

// SetPrenom sets the "Prenom" field.
func (fuo *FormUpdateOne) SetPrenom(s string) *FormUpdateOne {
	fuo.mutation.SetPrenom(s)
	return fuo
}

// SetAnniversaire sets the "Anniversaire" field.
func (fuo *FormUpdateOne) SetAnniversaire(s string) *FormUpdateOne {
	fuo.mutation.SetAnniversaire(s)
	return fuo
}

// SetNationalite sets the "Nationalite" field.
func (fuo *FormUpdateOne) SetNationalite(s string) *FormUpdateOne {
	fuo.mutation.SetNationalite(s)
	return fuo
}

// SetSexe sets the "Sexe" field.
func (fuo *FormUpdateOne) SetSexe(s string) *FormUpdateOne {
	fuo.mutation.SetSexe(s)
	return fuo
}

// SetNiveau sets the "Niveau" field.
func (fuo *FormUpdateOne) SetNiveau(s string) *FormUpdateOne {
	fuo.mutation.SetNiveau(s)
	return fuo
}

// SetFFT sets the "FFT" field.
func (fuo *FormUpdateOne) SetFFT(s string) *FormUpdateOne {
	fuo.mutation.SetFFT(s)
	return fuo
}

// SetLocationR sets the "LocationR" field.
func (fuo *FormUpdateOne) SetLocationR(s string) *FormUpdateOne {
	fuo.mutation.SetLocationR(s)
	return fuo
}

// SetRepas sets the "Repas" field.
func (fuo *FormUpdateOne) SetRepas(s string) *FormUpdateOne {
	fuo.mutation.SetRepas(s)
	return fuo
}

// SetFormule sets the "Formule" field.
func (fuo *FormUpdateOne) SetFormule(s string) *FormUpdateOne {
	fuo.mutation.SetFormule(s)
	return fuo
}

// SetSemaine sets the "Semaine" field.
func (fuo *FormUpdateOne) SetSemaine(s string) *FormUpdateOne {
	fuo.mutation.SetSemaine(s)
	return fuo
}

// SetContactParentsID sets the "contactParents" edge to the ContactParents entity by ID.
func (fuo *FormUpdateOne) SetContactParentsID(id int) *FormUpdateOne {
	fuo.mutation.SetContactParentsID(id)
	return fuo
}

// SetNillableContactParentsID sets the "contactParents" edge to the ContactParents entity by ID if the given value is not nil.
func (fuo *FormUpdateOne) SetNillableContactParentsID(id *int) *FormUpdateOne {
	if id != nil {
		fuo = fuo.SetContactParentsID(*id)
	}
	return fuo
}

// SetContactParents sets the "contactParents" edge to the ContactParents entity.
func (fuo *FormUpdateOne) SetContactParents(c *ContactParents) *FormUpdateOne {
	return fuo.SetContactParentsID(c.ID)
}

// Mutation returns the FormMutation object of the builder.
func (fuo *FormUpdateOne) Mutation() *FormMutation {
	return fuo.mutation
}

// ClearContactParents clears the "contactParents" edge to the ContactParents entity.
func (fuo *FormUpdateOne) ClearContactParents() *FormUpdateOne {
	fuo.mutation.ClearContactParents()
	return fuo
}

// Save executes the query and returns the updated Form entity.
func (fuo *FormUpdateOne) Save(ctx context.Context) (*Form, error) {
	var (
		err  error
		node *Form
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FormUpdateOne) SaveX(ctx context.Context) *Form {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FormUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FormUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FormUpdateOne) sqlSave(ctx context.Context) (_node *Form, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   form.Table,
			Columns: form.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: form.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Form.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldEmail,
		})
	}
	if value, ok := fuo.mutation.Nom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNom,
		})
	}
	if value, ok := fuo.mutation.Prenom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldPrenom,
		})
	}
	if value, ok := fuo.mutation.Anniversaire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldAnniversaire,
		})
	}
	if value, ok := fuo.mutation.Nationalite(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNationalite,
		})
	}
	if value, ok := fuo.mutation.Sexe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSexe,
		})
	}
	if value, ok := fuo.mutation.Niveau(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNiveau,
		})
	}
	if value, ok := fuo.mutation.FFT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFFT,
		})
	}
	if value, ok := fuo.mutation.LocationR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldLocationR,
		})
	}
	if value, ok := fuo.mutation.Repas(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldRepas,
		})
	}
	if value, ok := fuo.mutation.Formule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFormule,
		})
	}
	if value, ok := fuo.mutation.Semaine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSemaine,
		})
	}
	if fuo.mutation.ContactParentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   form.ContactParentsTable,
			Columns: []string{form.ContactParentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactparents.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ContactParentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   form.ContactParentsTable,
			Columns: []string{form.ContactParentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactparents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Form{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{form.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
