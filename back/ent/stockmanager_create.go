// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dechild/ent/stockmanager"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StockManagerCreate is the builder for creating a StockManager entity.
type StockManagerCreate struct {
	config
	mutation *StockManagerMutation
	hooks    []Hook
}

// SetActivite sets the "Activite" field.
func (smc *StockManagerCreate) SetActivite(s string) *StockManagerCreate {
	smc.mutation.SetActivite(s)
	return smc
}

// SetSemaineA sets the "SemaineA" field.
func (smc *StockManagerCreate) SetSemaineA(i int) *StockManagerCreate {
	smc.mutation.SetSemaineA(i)
	return smc
}

// SetSemaineB sets the "SemaineB" field.
func (smc *StockManagerCreate) SetSemaineB(i int) *StockManagerCreate {
	smc.mutation.SetSemaineB(i)
	return smc
}

// SetSemaineC sets the "SemaineC" field.
func (smc *StockManagerCreate) SetSemaineC(i int) *StockManagerCreate {
	smc.mutation.SetSemaineC(i)
	return smc
}

// SetSemaineD sets the "SemaineD" field.
func (smc *StockManagerCreate) SetSemaineD(i int) *StockManagerCreate {
	smc.mutation.SetSemaineD(i)
	return smc
}

// SetSemaineE sets the "SemaineE" field.
func (smc *StockManagerCreate) SetSemaineE(i int) *StockManagerCreate {
	smc.mutation.SetSemaineE(i)
	return smc
}

// SetSemaineF sets the "SemaineF" field.
func (smc *StockManagerCreate) SetSemaineF(i int) *StockManagerCreate {
	smc.mutation.SetSemaineF(i)
	return smc
}

// SetSemaineG sets the "SemaineG" field.
func (smc *StockManagerCreate) SetSemaineG(i int) *StockManagerCreate {
	smc.mutation.SetSemaineG(i)
	return smc
}

// SetSemaineH sets the "SemaineH" field.
func (smc *StockManagerCreate) SetSemaineH(i int) *StockManagerCreate {
	smc.mutation.SetSemaineH(i)
	return smc
}

// SetID sets the "id" field.
func (smc *StockManagerCreate) SetID(i int) *StockManagerCreate {
	smc.mutation.SetID(i)
	return smc
}

// Mutation returns the StockManagerMutation object of the builder.
func (smc *StockManagerCreate) Mutation() *StockManagerMutation {
	return smc.mutation
}

// Save creates the StockManager in the database.
func (smc *StockManagerCreate) Save(ctx context.Context) (*StockManager, error) {
	var (
		err  error
		node *StockManager
	)
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			node, err = smc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			mut = smc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *StockManagerCreate) SaveX(ctx context.Context) *StockManager {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (smc *StockManagerCreate) check() error {
	if _, ok := smc.mutation.Activite(); !ok {
		return &ValidationError{Name: "Activite", err: errors.New("ent: missing required field \"Activite\"")}
	}
	if _, ok := smc.mutation.SemaineA(); !ok {
		return &ValidationError{Name: "SemaineA", err: errors.New("ent: missing required field \"SemaineA\"")}
	}
	if v, ok := smc.mutation.SemaineA(); ok {
		if err := stockmanager.SemaineAValidator(v); err != nil {
			return &ValidationError{Name: "SemaineA", err: fmt.Errorf("ent: validator failed for field \"SemaineA\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineB(); !ok {
		return &ValidationError{Name: "SemaineB", err: errors.New("ent: missing required field \"SemaineB\"")}
	}
	if v, ok := smc.mutation.SemaineB(); ok {
		if err := stockmanager.SemaineBValidator(v); err != nil {
			return &ValidationError{Name: "SemaineB", err: fmt.Errorf("ent: validator failed for field \"SemaineB\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineC(); !ok {
		return &ValidationError{Name: "SemaineC", err: errors.New("ent: missing required field \"SemaineC\"")}
	}
	if v, ok := smc.mutation.SemaineC(); ok {
		if err := stockmanager.SemaineCValidator(v); err != nil {
			return &ValidationError{Name: "SemaineC", err: fmt.Errorf("ent: validator failed for field \"SemaineC\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineD(); !ok {
		return &ValidationError{Name: "SemaineD", err: errors.New("ent: missing required field \"SemaineD\"")}
	}
	if v, ok := smc.mutation.SemaineD(); ok {
		if err := stockmanager.SemaineDValidator(v); err != nil {
			return &ValidationError{Name: "SemaineD", err: fmt.Errorf("ent: validator failed for field \"SemaineD\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineE(); !ok {
		return &ValidationError{Name: "SemaineE", err: errors.New("ent: missing required field \"SemaineE\"")}
	}
	if v, ok := smc.mutation.SemaineE(); ok {
		if err := stockmanager.SemaineEValidator(v); err != nil {
			return &ValidationError{Name: "SemaineE", err: fmt.Errorf("ent: validator failed for field \"SemaineE\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineF(); !ok {
		return &ValidationError{Name: "SemaineF", err: errors.New("ent: missing required field \"SemaineF\"")}
	}
	if v, ok := smc.mutation.SemaineF(); ok {
		if err := stockmanager.SemaineFValidator(v); err != nil {
			return &ValidationError{Name: "SemaineF", err: fmt.Errorf("ent: validator failed for field \"SemaineF\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineG(); !ok {
		return &ValidationError{Name: "SemaineG", err: errors.New("ent: missing required field \"SemaineG\"")}
	}
	if v, ok := smc.mutation.SemaineG(); ok {
		if err := stockmanager.SemaineGValidator(v); err != nil {
			return &ValidationError{Name: "SemaineG", err: fmt.Errorf("ent: validator failed for field \"SemaineG\": %w", err)}
		}
	}
	if _, ok := smc.mutation.SemaineH(); !ok {
		return &ValidationError{Name: "SemaineH", err: errors.New("ent: missing required field \"SemaineH\"")}
	}
	if v, ok := smc.mutation.SemaineH(); ok {
		if err := stockmanager.SemaineHValidator(v); err != nil {
			return &ValidationError{Name: "SemaineH", err: fmt.Errorf("ent: validator failed for field \"SemaineH\": %w", err)}
		}
	}
	if v, ok := smc.mutation.ID(); ok {
		if err := stockmanager.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (smc *StockManagerCreate) sqlSave(ctx context.Context) (*StockManager, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (smc *StockManagerCreate) createSpec() (*StockManager, *sqlgraph.CreateSpec) {
	var (
		_node = &StockManager{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stockmanager.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stockmanager.FieldID,
			},
		}
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.Activite(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockmanager.FieldActivite,
		})
		_node.Activite = value
	}
	if value, ok := smc.mutation.SemaineA(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineA,
		})
		_node.SemaineA = value
	}
	if value, ok := smc.mutation.SemaineB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineB,
		})
		_node.SemaineB = value
	}
	if value, ok := smc.mutation.SemaineC(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineC,
		})
		_node.SemaineC = value
	}
	if value, ok := smc.mutation.SemaineD(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineD,
		})
		_node.SemaineD = value
	}
	if value, ok := smc.mutation.SemaineE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineE,
		})
		_node.SemaineE = value
	}
	if value, ok := smc.mutation.SemaineF(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineF,
		})
		_node.SemaineF = value
	}
	if value, ok := smc.mutation.SemaineG(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineG,
		})
		_node.SemaineG = value
	}
	if value, ok := smc.mutation.SemaineH(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stockmanager.FieldSemaineH,
		})
		_node.SemaineH = value
	}
	return _node, _spec
}

// StockManagerCreateBulk is the builder for creating many StockManager entities in bulk.
type StockManagerCreateBulk struct {
	config
	builders []*StockManagerCreate
}

// Save creates the StockManager entities in the database.
func (smcb *StockManagerCreateBulk) Save(ctx context.Context) ([]*StockManager, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*StockManager, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *StockManagerCreateBulk) SaveX(ctx context.Context) []*StockManager {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
