// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dechild/ent/contactparents"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ContactParents is the model entity for the ContactParents schema.
type ContactParents struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Nom holds the value of the "Nom" field.
	Nom string `json:"Nom,omitempty"`
	// Prenom holds the value of the "Prenom" field.
	Prenom string `json:"Prenom,omitempty"`
	// Sexe holds the value of the "Sexe" field.
	Sexe string `json:"Sexe,omitempty"`
	// Adresse holds the value of the "Adresse" field.
	Adresse string `json:"Adresse,omitempty"`
	// Ville holds the value of the "Ville" field.
	Ville string `json:"Ville,omitempty"`
	// CP holds the value of the "CP" field.
	CP string `json:"CP,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Tel1 holds the value of the "Tel1" field.
	Tel1 string `json:"Tel1,omitempty"`
	// Tel2 holds the value of the "Tel2" field.
	Tel2 string `json:"Tel2,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactParentsQuery when eager-loading is set.
	Edges ContactParentsEdges `json:"edges"`
}

// ContactParentsEdges holds the relations/edges for other nodes in the graph.
type ContactParentsEdges struct {
	// Child holds the value of the child edge.
	Child []*Form `json:"child,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading.
func (e ContactParentsEdges) ChildOrErr() ([]*Form, error) {
	if e.loadedTypes[0] {
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContactParents) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case contactparents.FieldID:
			values[i] = &sql.NullInt64{}
		case contactparents.FieldNom, contactparents.FieldPrenom, contactparents.FieldSexe, contactparents.FieldAdresse, contactparents.FieldVille, contactparents.FieldCP, contactparents.FieldEmail, contactparents.FieldTel1, contactparents.FieldTel2:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type ContactParents", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContactParents fields.
func (cp *ContactParents) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contactparents.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case contactparents.FieldNom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Nom", values[i])
			} else if value.Valid {
				cp.Nom = value.String
			}
		case contactparents.FieldPrenom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Prenom", values[i])
			} else if value.Valid {
				cp.Prenom = value.String
			}
		case contactparents.FieldSexe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Sexe", values[i])
			} else if value.Valid {
				cp.Sexe = value.String
			}
		case contactparents.FieldAdresse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Adresse", values[i])
			} else if value.Valid {
				cp.Adresse = value.String
			}
		case contactparents.FieldVille:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Ville", values[i])
			} else if value.Valid {
				cp.Ville = value.String
			}
		case contactparents.FieldCP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CP", values[i])
			} else if value.Valid {
				cp.CP = value.String
			}
		case contactparents.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				cp.Email = value.String
			}
		case contactparents.FieldTel1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Tel1", values[i])
			} else if value.Valid {
				cp.Tel1 = value.String
			}
		case contactparents.FieldTel2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Tel2", values[i])
			} else if value.Valid {
				cp.Tel2 = value.String
			}
		}
	}
	return nil
}

// QueryChild queries the "child" edge of the ContactParents entity.
func (cp *ContactParents) QueryChild() *FormQuery {
	return (&ContactParentsClient{config: cp.config}).QueryChild(cp)
}

// Update returns a builder for updating this ContactParents.
// Note that you need to call ContactParents.Unwrap() before calling this method if this ContactParents
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ContactParents) Update() *ContactParentsUpdateOne {
	return (&ContactParentsClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the ContactParents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ContactParents) Unwrap() *ContactParents {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContactParents is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ContactParents) String() string {
	var builder strings.Builder
	builder.WriteString("ContactParents(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", Nom=")
	builder.WriteString(cp.Nom)
	builder.WriteString(", Prenom=")
	builder.WriteString(cp.Prenom)
	builder.WriteString(", Sexe=")
	builder.WriteString(cp.Sexe)
	builder.WriteString(", Adresse=")
	builder.WriteString(cp.Adresse)
	builder.WriteString(", Ville=")
	builder.WriteString(cp.Ville)
	builder.WriteString(", CP=")
	builder.WriteString(cp.CP)
	builder.WriteString(", Email=")
	builder.WriteString(cp.Email)
	builder.WriteString(", Tel1=")
	builder.WriteString(cp.Tel1)
	builder.WriteString(", Tel2=")
	builder.WriteString(cp.Tel2)
	builder.WriteByte(')')
	return builder.String()
}

// ContactParentsSlice is a parsable slice of ContactParents.
type ContactParentsSlice []*ContactParents

func (cp ContactParentsSlice) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
