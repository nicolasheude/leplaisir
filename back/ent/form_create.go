// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dechild/ent/contactparents"
	"dechild/ent/form"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormCreate is the builder for creating a Form entity.
type FormCreate struct {
	config
	mutation *FormMutation
	hooks    []Hook
}

// SetEmail sets the "Email" field.
func (fc *FormCreate) SetEmail(s string) *FormCreate {
	fc.mutation.SetEmail(s)
	return fc
}

// SetNom sets the "Nom" field.
func (fc *FormCreate) SetNom(s string) *FormCreate {
	fc.mutation.SetNom(s)
	return fc
}

// SetPrenom sets the "Prenom" field.
func (fc *FormCreate) SetPrenom(s string) *FormCreate {
	fc.mutation.SetPrenom(s)
	return fc
}

// SetAnniversaire sets the "Anniversaire" field.
func (fc *FormCreate) SetAnniversaire(s string) *FormCreate {
	fc.mutation.SetAnniversaire(s)
	return fc
}

// SetNationalite sets the "Nationalite" field.
func (fc *FormCreate) SetNationalite(s string) *FormCreate {
	fc.mutation.SetNationalite(s)
	return fc
}

// SetSexe sets the "Sexe" field.
func (fc *FormCreate) SetSexe(s string) *FormCreate {
	fc.mutation.SetSexe(s)
	return fc
}

// SetNiveau sets the "Niveau" field.
func (fc *FormCreate) SetNiveau(s string) *FormCreate {
	fc.mutation.SetNiveau(s)
	return fc
}

// SetFFT sets the "FFT" field.
func (fc *FormCreate) SetFFT(s string) *FormCreate {
	fc.mutation.SetFFT(s)
	return fc
}

// SetLocationR sets the "LocationR" field.
func (fc *FormCreate) SetLocationR(s string) *FormCreate {
	fc.mutation.SetLocationR(s)
	return fc
}

// SetRepas sets the "Repas" field.
func (fc *FormCreate) SetRepas(s string) *FormCreate {
	fc.mutation.SetRepas(s)
	return fc
}

// SetFormule sets the "Formule" field.
func (fc *FormCreate) SetFormule(s string) *FormCreate {
	fc.mutation.SetFormule(s)
	return fc
}

// SetSemaine sets the "Semaine" field.
func (fc *FormCreate) SetSemaine(s string) *FormCreate {
	fc.mutation.SetSemaine(s)
	return fc
}

// SetID sets the "id" field.
func (fc *FormCreate) SetID(i int) *FormCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetContactParentsID sets the "contactParents" edge to the ContactParents entity by ID.
func (fc *FormCreate) SetContactParentsID(id int) *FormCreate {
	fc.mutation.SetContactParentsID(id)
	return fc
}

// SetNillableContactParentsID sets the "contactParents" edge to the ContactParents entity by ID if the given value is not nil.
func (fc *FormCreate) SetNillableContactParentsID(id *int) *FormCreate {
	if id != nil {
		fc = fc.SetContactParentsID(*id)
	}
	return fc
}

// SetContactParents sets the "contactParents" edge to the ContactParents entity.
func (fc *FormCreate) SetContactParents(c *ContactParents) *FormCreate {
	return fc.SetContactParentsID(c.ID)
}

// Mutation returns the FormMutation object of the builder.
func (fc *FormCreate) Mutation() *FormMutation {
	return fc.mutation
}

// Save creates the Form in the database.
func (fc *FormCreate) Save(ctx context.Context) (*Form, error) {
	var (
		err  error
		node *Form
	)
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FormCreate) SaveX(ctx context.Context) *Form {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (fc *FormCreate) check() error {
	if _, ok := fc.mutation.Email(); !ok {
		return &ValidationError{Name: "Email", err: errors.New("ent: missing required field \"Email\"")}
	}
	if _, ok := fc.mutation.Nom(); !ok {
		return &ValidationError{Name: "Nom", err: errors.New("ent: missing required field \"Nom\"")}
	}
	if _, ok := fc.mutation.Prenom(); !ok {
		return &ValidationError{Name: "Prenom", err: errors.New("ent: missing required field \"Prenom\"")}
	}
	if _, ok := fc.mutation.Anniversaire(); !ok {
		return &ValidationError{Name: "Anniversaire", err: errors.New("ent: missing required field \"Anniversaire\"")}
	}
	if _, ok := fc.mutation.Nationalite(); !ok {
		return &ValidationError{Name: "Nationalite", err: errors.New("ent: missing required field \"Nationalite\"")}
	}
	if _, ok := fc.mutation.Sexe(); !ok {
		return &ValidationError{Name: "Sexe", err: errors.New("ent: missing required field \"Sexe\"")}
	}
	if _, ok := fc.mutation.Niveau(); !ok {
		return &ValidationError{Name: "Niveau", err: errors.New("ent: missing required field \"Niveau\"")}
	}
	if _, ok := fc.mutation.FFT(); !ok {
		return &ValidationError{Name: "FFT", err: errors.New("ent: missing required field \"FFT\"")}
	}
	if _, ok := fc.mutation.LocationR(); !ok {
		return &ValidationError{Name: "LocationR", err: errors.New("ent: missing required field \"LocationR\"")}
	}
	if _, ok := fc.mutation.Repas(); !ok {
		return &ValidationError{Name: "Repas", err: errors.New("ent: missing required field \"Repas\"")}
	}
	if _, ok := fc.mutation.Formule(); !ok {
		return &ValidationError{Name: "Formule", err: errors.New("ent: missing required field \"Formule\"")}
	}
	if _, ok := fc.mutation.Semaine(); !ok {
		return &ValidationError{Name: "Semaine", err: errors.New("ent: missing required field \"Semaine\"")}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := form.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (fc *FormCreate) sqlSave(ctx context.Context) (*Form, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (fc *FormCreate) createSpec() (*Form, *sqlgraph.CreateSpec) {
	var (
		_node = &Form{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: form.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: form.FieldID,
			},
		}
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := fc.mutation.Nom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNom,
		})
		_node.Nom = value
	}
	if value, ok := fc.mutation.Prenom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldPrenom,
		})
		_node.Prenom = value
	}
	if value, ok := fc.mutation.Anniversaire(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldAnniversaire,
		})
		_node.Anniversaire = value
	}
	if value, ok := fc.mutation.Nationalite(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNationalite,
		})
		_node.Nationalite = value
	}
	if value, ok := fc.mutation.Sexe(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSexe,
		})
		_node.Sexe = value
	}
	if value, ok := fc.mutation.Niveau(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldNiveau,
		})
		_node.Niveau = value
	}
	if value, ok := fc.mutation.FFT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFFT,
		})
		_node.FFT = value
	}
	if value, ok := fc.mutation.LocationR(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldLocationR,
		})
		_node.LocationR = value
	}
	if value, ok := fc.mutation.Repas(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldRepas,
		})
		_node.Repas = value
	}
	if value, ok := fc.mutation.Formule(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldFormule,
		})
		_node.Formule = value
	}
	if value, ok := fc.mutation.Semaine(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: form.FieldSemaine,
		})
		_node.Semaine = value
	}
	if nodes := fc.mutation.ContactParentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   form.ContactParentsTable,
			Columns: []string{form.ContactParentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contactparents.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FormCreateBulk is the builder for creating many Form entities in bulk.
type FormCreateBulk struct {
	config
	builders []*FormCreate
}

// Save creates the Form entities in the database.
func (fcb *FormCreateBulk) Save(ctx context.Context) ([]*Form, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Form, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FormCreateBulk) SaveX(ctx context.Context) []*Form {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
