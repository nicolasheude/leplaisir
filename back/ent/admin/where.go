// Code generated by entc, DO NOT EDIT.

package admin

import (
	"dechild/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Identifiant applies equality check predicate on the "Identifiant" field. It's identical to IdentifiantEQ.
func Identifiant(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentifiant), v))
	})
}

// MotDePasse applies equality check predicate on the "MotDePasse" field. It's identical to MotDePasseEQ.
func MotDePasse(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotDePasse), v))
	})
}

// IdentifiantEQ applies the EQ predicate on the "Identifiant" field.
func IdentifiantEQ(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantNEQ applies the NEQ predicate on the "Identifiant" field.
func IdentifiantNEQ(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantIn applies the In predicate on the "Identifiant" field.
func IdentifiantIn(vs ...string) predicate.Admin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdentifiant), v...))
	})
}

// IdentifiantNotIn applies the NotIn predicate on the "Identifiant" field.
func IdentifiantNotIn(vs ...string) predicate.Admin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdentifiant), v...))
	})
}

// IdentifiantGT applies the GT predicate on the "Identifiant" field.
func IdentifiantGT(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantGTE applies the GTE predicate on the "Identifiant" field.
func IdentifiantGTE(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantLT applies the LT predicate on the "Identifiant" field.
func IdentifiantLT(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantLTE applies the LTE predicate on the "Identifiant" field.
func IdentifiantLTE(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantContains applies the Contains predicate on the "Identifiant" field.
func IdentifiantContains(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantHasPrefix applies the HasPrefix predicate on the "Identifiant" field.
func IdentifiantHasPrefix(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantHasSuffix applies the HasSuffix predicate on the "Identifiant" field.
func IdentifiantHasSuffix(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantEqualFold applies the EqualFold predicate on the "Identifiant" field.
func IdentifiantEqualFold(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdentifiant), v))
	})
}

// IdentifiantContainsFold applies the ContainsFold predicate on the "Identifiant" field.
func IdentifiantContainsFold(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdentifiant), v))
	})
}

// MotDePasseEQ applies the EQ predicate on the "MotDePasse" field.
func MotDePasseEQ(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseNEQ applies the NEQ predicate on the "MotDePasse" field.
func MotDePasseNEQ(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseIn applies the In predicate on the "MotDePasse" field.
func MotDePasseIn(vs ...string) predicate.Admin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMotDePasse), v...))
	})
}

// MotDePasseNotIn applies the NotIn predicate on the "MotDePasse" field.
func MotDePasseNotIn(vs ...string) predicate.Admin {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Admin(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMotDePasse), v...))
	})
}

// MotDePasseGT applies the GT predicate on the "MotDePasse" field.
func MotDePasseGT(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseGTE applies the GTE predicate on the "MotDePasse" field.
func MotDePasseGTE(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseLT applies the LT predicate on the "MotDePasse" field.
func MotDePasseLT(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseLTE applies the LTE predicate on the "MotDePasse" field.
func MotDePasseLTE(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseContains applies the Contains predicate on the "MotDePasse" field.
func MotDePasseContains(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseHasPrefix applies the HasPrefix predicate on the "MotDePasse" field.
func MotDePasseHasPrefix(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseHasSuffix applies the HasSuffix predicate on the "MotDePasse" field.
func MotDePasseHasSuffix(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseEqualFold applies the EqualFold predicate on the "MotDePasse" field.
func MotDePasseEqualFold(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMotDePasse), v))
	})
}

// MotDePasseContainsFold applies the ContainsFold predicate on the "MotDePasse" field.
func MotDePasseContainsFold(v string) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMotDePasse), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Admin) predicate.Admin {
	return predicate.Admin(func(s *sql.Selector) {
		p(s.Not())
	})
}
