// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dechild/ent/contactparents"
	"dechild/ent/form"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Form is the model entity for the Form schema.
type Form struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Nom holds the value of the "Nom" field.
	Nom string `json:"Nom,omitempty"`
	// Prenom holds the value of the "Prenom" field.
	Prenom string `json:"Prenom,omitempty"`
	// Anniversaire holds the value of the "Anniversaire" field.
	Anniversaire string `json:"Anniversaire,omitempty"`
	// Nationalite holds the value of the "Nationalite" field.
	Nationalite string `json:"Nationalite,omitempty"`
	// Sexe holds the value of the "Sexe" field.
	Sexe string `json:"Sexe,omitempty"`
	// Niveau holds the value of the "Niveau" field.
	Niveau string `json:"Niveau,omitempty"`
	// FFT holds the value of the "FFT" field.
	FFT string `json:"FFT,omitempty"`
	// LocationR holds the value of the "LocationR" field.
	LocationR string `json:"LocationR,omitempty"`
	// Repas holds the value of the "Repas" field.
	Repas string `json:"Repas,omitempty"`
	// Formule holds the value of the "Formule" field.
	Formule string `json:"Formule,omitempty"`
	// Semaine holds the value of the "Semaine" field.
	Semaine string `json:"Semaine,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormQuery when eager-loading is set.
	Edges                FormEdges `json:"edges"`
	form_contact_parents *int
}

// FormEdges holds the relations/edges for other nodes in the graph.
type FormEdges struct {
	// ContactParents holds the value of the contactParents edge.
	ContactParents *ContactParents `json:"contactParents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContactParentsOrErr returns the ContactParents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormEdges) ContactParentsOrErr() (*ContactParents, error) {
	if e.loadedTypes[0] {
		if e.ContactParents == nil {
			// The edge contactParents was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contactparents.Label}
		}
		return e.ContactParents, nil
	}
	return nil, &NotLoadedError{edge: "contactParents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Form) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case form.FieldID:
			values[i] = &sql.NullInt64{}
		case form.FieldEmail, form.FieldNom, form.FieldPrenom, form.FieldAnniversaire, form.FieldNationalite, form.FieldSexe, form.FieldNiveau, form.FieldFFT, form.FieldLocationR, form.FieldRepas, form.FieldFormule, form.FieldSemaine:
			values[i] = &sql.NullString{}
		case form.ForeignKeys[0]: // form_contact_parents
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Form", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Form fields.
func (f *Form) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case form.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case form.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				f.Email = value.String
			}
		case form.FieldNom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Nom", values[i])
			} else if value.Valid {
				f.Nom = value.String
			}
		case form.FieldPrenom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Prenom", values[i])
			} else if value.Valid {
				f.Prenom = value.String
			}
		case form.FieldAnniversaire:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Anniversaire", values[i])
			} else if value.Valid {
				f.Anniversaire = value.String
			}
		case form.FieldNationalite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Nationalite", values[i])
			} else if value.Valid {
				f.Nationalite = value.String
			}
		case form.FieldSexe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Sexe", values[i])
			} else if value.Valid {
				f.Sexe = value.String
			}
		case form.FieldNiveau:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Niveau", values[i])
			} else if value.Valid {
				f.Niveau = value.String
			}
		case form.FieldFFT:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FFT", values[i])
			} else if value.Valid {
				f.FFT = value.String
			}
		case form.FieldLocationR:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LocationR", values[i])
			} else if value.Valid {
				f.LocationR = value.String
			}
		case form.FieldRepas:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Repas", values[i])
			} else if value.Valid {
				f.Repas = value.String
			}
		case form.FieldFormule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Formule", values[i])
			} else if value.Valid {
				f.Formule = value.String
			}
		case form.FieldSemaine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Semaine", values[i])
			} else if value.Valid {
				f.Semaine = value.String
			}
		case form.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field form_contact_parents", value)
			} else if value.Valid {
				f.form_contact_parents = new(int)
				*f.form_contact_parents = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryContactParents queries the "contactParents" edge of the Form entity.
func (f *Form) QueryContactParents() *ContactParentsQuery {
	return (&FormClient{config: f.config}).QueryContactParents(f)
}

// Update returns a builder for updating this Form.
// Note that you need to call Form.Unwrap() before calling this method if this Form
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Form) Update() *FormUpdateOne {
	return (&FormClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Form entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Form) Unwrap() *Form {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Form is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Form) String() string {
	var builder strings.Builder
	builder.WriteString("Form(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", Email=")
	builder.WriteString(f.Email)
	builder.WriteString(", Nom=")
	builder.WriteString(f.Nom)
	builder.WriteString(", Prenom=")
	builder.WriteString(f.Prenom)
	builder.WriteString(", Anniversaire=")
	builder.WriteString(f.Anniversaire)
	builder.WriteString(", Nationalite=")
	builder.WriteString(f.Nationalite)
	builder.WriteString(", Sexe=")
	builder.WriteString(f.Sexe)
	builder.WriteString(", Niveau=")
	builder.WriteString(f.Niveau)
	builder.WriteString(", FFT=")
	builder.WriteString(f.FFT)
	builder.WriteString(", LocationR=")
	builder.WriteString(f.LocationR)
	builder.WriteString(", Repas=")
	builder.WriteString(f.Repas)
	builder.WriteString(", Formule=")
	builder.WriteString(f.Formule)
	builder.WriteString(", Semaine=")
	builder.WriteString(f.Semaine)
	builder.WriteByte(')')
	return builder.String()
}

// Forms is a parsable slice of Form.
type Forms []*Form

func (f Forms) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
