// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dechild/ent/stockmanager"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// StockManager is the model entity for the StockManager schema.
type StockManager struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Activite holds the value of the "Activite" field.
	Activite string `json:"Activite,omitempty"`
	// SemaineA holds the value of the "SemaineA" field.
	SemaineA int `json:"SemaineA,omitempty"`
	// SemaineB holds the value of the "SemaineB" field.
	SemaineB int `json:"SemaineB,omitempty"`
	// SemaineC holds the value of the "SemaineC" field.
	SemaineC int `json:"SemaineC,omitempty"`
	// SemaineD holds the value of the "SemaineD" field.
	SemaineD int `json:"SemaineD,omitempty"`
	// SemaineE holds the value of the "SemaineE" field.
	SemaineE int `json:"SemaineE,omitempty"`
	// SemaineF holds the value of the "SemaineF" field.
	SemaineF int `json:"SemaineF,omitempty"`
	// SemaineG holds the value of the "SemaineG" field.
	SemaineG int `json:"SemaineG,omitempty"`
	// SemaineH holds the value of the "SemaineH" field.
	SemaineH int `json:"SemaineH,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StockManager) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stockmanager.FieldID, stockmanager.FieldSemaineA, stockmanager.FieldSemaineB, stockmanager.FieldSemaineC, stockmanager.FieldSemaineD, stockmanager.FieldSemaineE, stockmanager.FieldSemaineF, stockmanager.FieldSemaineG, stockmanager.FieldSemaineH:
			values[i] = &sql.NullInt64{}
		case stockmanager.FieldActivite:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type StockManager", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StockManager fields.
func (sm *StockManager) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stockmanager.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case stockmanager.FieldActivite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Activite", values[i])
			} else if value.Valid {
				sm.Activite = value.String
			}
		case stockmanager.FieldSemaineA:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineA", values[i])
			} else if value.Valid {
				sm.SemaineA = int(value.Int64)
			}
		case stockmanager.FieldSemaineB:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineB", values[i])
			} else if value.Valid {
				sm.SemaineB = int(value.Int64)
			}
		case stockmanager.FieldSemaineC:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineC", values[i])
			} else if value.Valid {
				sm.SemaineC = int(value.Int64)
			}
		case stockmanager.FieldSemaineD:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineD", values[i])
			} else if value.Valid {
				sm.SemaineD = int(value.Int64)
			}
		case stockmanager.FieldSemaineE:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineE", values[i])
			} else if value.Valid {
				sm.SemaineE = int(value.Int64)
			}
		case stockmanager.FieldSemaineF:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineF", values[i])
			} else if value.Valid {
				sm.SemaineF = int(value.Int64)
			}
		case stockmanager.FieldSemaineG:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineG", values[i])
			} else if value.Valid {
				sm.SemaineG = int(value.Int64)
			}
		case stockmanager.FieldSemaineH:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SemaineH", values[i])
			} else if value.Valid {
				sm.SemaineH = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StockManager.
// Note that you need to call StockManager.Unwrap() before calling this method if this StockManager
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *StockManager) Update() *StockManagerUpdateOne {
	return (&StockManagerClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the StockManager entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *StockManager) Unwrap() *StockManager {
	tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: StockManager is not a transactional entity")
	}
	sm.config.driver = tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *StockManager) String() string {
	var builder strings.Builder
	builder.WriteString("StockManager(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteString(", Activite=")
	builder.WriteString(sm.Activite)
	builder.WriteString(", SemaineA=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineA))
	builder.WriteString(", SemaineB=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineB))
	builder.WriteString(", SemaineC=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineC))
	builder.WriteString(", SemaineD=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineD))
	builder.WriteString(", SemaineE=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineE))
	builder.WriteString(", SemaineF=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineF))
	builder.WriteString(", SemaineG=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineG))
	builder.WriteString(", SemaineH=")
	builder.WriteString(fmt.Sprintf("%v", sm.SemaineH))
	builder.WriteByte(')')
	return builder.String()
}

// StockManagers is a parsable slice of StockManager.
type StockManagers []*StockManager

func (sm StockManagers) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
