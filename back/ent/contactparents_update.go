// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dechild/ent/contactparents"
	"dechild/ent/form"
	"dechild/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactParentsUpdate is the builder for updating ContactParents entities.
type ContactParentsUpdate struct {
	config
	hooks    []Hook
	mutation *ContactParentsMutation
}

// Where adds a new predicate for the ContactParentsUpdate builder.
func (cpu *ContactParentsUpdate) Where(ps ...predicate.ContactParents) *ContactParentsUpdate {
	cpu.mutation.predicates = append(cpu.mutation.predicates, ps...)
	return cpu
}

// SetNom sets the "Nom" field.
func (cpu *ContactParentsUpdate) SetNom(s string) *ContactParentsUpdate {
	cpu.mutation.SetNom(s)
	return cpu
}

// SetPrenom sets the "Prenom" field.
func (cpu *ContactParentsUpdate) SetPrenom(s string) *ContactParentsUpdate {
	cpu.mutation.SetPrenom(s)
	return cpu
}

// SetSexe sets the "Sexe" field.
func (cpu *ContactParentsUpdate) SetSexe(s string) *ContactParentsUpdate {
	cpu.mutation.SetSexe(s)
	return cpu
}

// SetAdresse sets the "Adresse" field.
func (cpu *ContactParentsUpdate) SetAdresse(s string) *ContactParentsUpdate {
	cpu.mutation.SetAdresse(s)
	return cpu
}

// SetVille sets the "Ville" field.
func (cpu *ContactParentsUpdate) SetVille(s string) *ContactParentsUpdate {
	cpu.mutation.SetVille(s)
	return cpu
}

// SetCP sets the "CP" field.
func (cpu *ContactParentsUpdate) SetCP(s string) *ContactParentsUpdate {
	cpu.mutation.SetCP(s)
	return cpu
}

// SetEmail sets the "Email" field.
func (cpu *ContactParentsUpdate) SetEmail(s string) *ContactParentsUpdate {
	cpu.mutation.SetEmail(s)
	return cpu
}

// SetTel1 sets the "Tel1" field.
func (cpu *ContactParentsUpdate) SetTel1(s string) *ContactParentsUpdate {
	cpu.mutation.SetTel1(s)
	return cpu
}

// SetTel2 sets the "Tel2" field.
func (cpu *ContactParentsUpdate) SetTel2(s string) *ContactParentsUpdate {
	cpu.mutation.SetTel2(s)
	return cpu
}

// SetNillableTel2 sets the "Tel2" field if the given value is not nil.
func (cpu *ContactParentsUpdate) SetNillableTel2(s *string) *ContactParentsUpdate {
	if s != nil {
		cpu.SetTel2(*s)
	}
	return cpu
}

// ClearTel2 clears the value of the "Tel2" field.
func (cpu *ContactParentsUpdate) ClearTel2() *ContactParentsUpdate {
	cpu.mutation.ClearTel2()
	return cpu
}

// AddChildIDs adds the "child" edge to the Form entity by IDs.
func (cpu *ContactParentsUpdate) AddChildIDs(ids ...int) *ContactParentsUpdate {
	cpu.mutation.AddChildIDs(ids...)
	return cpu
}

// AddChild adds the "child" edges to the Form entity.
func (cpu *ContactParentsUpdate) AddChild(f ...*Form) *ContactParentsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cpu.AddChildIDs(ids...)
}

// Mutation returns the ContactParentsMutation object of the builder.
func (cpu *ContactParentsUpdate) Mutation() *ContactParentsMutation {
	return cpu.mutation
}

// ClearChild clears all "child" edges to the Form entity.
func (cpu *ContactParentsUpdate) ClearChild() *ContactParentsUpdate {
	cpu.mutation.ClearChild()
	return cpu
}

// RemoveChildIDs removes the "child" edge to Form entities by IDs.
func (cpu *ContactParentsUpdate) RemoveChildIDs(ids ...int) *ContactParentsUpdate {
	cpu.mutation.RemoveChildIDs(ids...)
	return cpu
}

// RemoveChild removes "child" edges to Form entities.
func (cpu *ContactParentsUpdate) RemoveChild(f ...*Form) *ContactParentsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cpu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ContactParentsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactParentsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ContactParentsUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ContactParentsUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ContactParentsUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *ContactParentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactparents.Table,
			Columns: contactparents.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactparents.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Nom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldNom,
		})
	}
	if value, ok := cpu.mutation.Prenom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldPrenom,
		})
	}
	if value, ok := cpu.mutation.Sexe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldSexe,
		})
	}
	if value, ok := cpu.mutation.Adresse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldAdresse,
		})
	}
	if value, ok := cpu.mutation.Ville(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldVille,
		})
	}
	if value, ok := cpu.mutation.CP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldCP,
		})
	}
	if value, ok := cpu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldEmail,
		})
	}
	if value, ok := cpu.mutation.Tel1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldTel1,
		})
	}
	if value, ok := cpu.mutation.Tel2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldTel2,
		})
	}
	if cpu.mutation.Tel2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactparents.FieldTel2,
		})
	}
	if cpu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedChildIDs(); len(nodes) > 0 && !cpu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactparents.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContactParentsUpdateOne is the builder for updating a single ContactParents entity.
type ContactParentsUpdateOne struct {
	config
	hooks    []Hook
	mutation *ContactParentsMutation
}

// SetNom sets the "Nom" field.
func (cpuo *ContactParentsUpdateOne) SetNom(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetNom(s)
	return cpuo
}

// SetPrenom sets the "Prenom" field.
func (cpuo *ContactParentsUpdateOne) SetPrenom(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetPrenom(s)
	return cpuo
}

// SetSexe sets the "Sexe" field.
func (cpuo *ContactParentsUpdateOne) SetSexe(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetSexe(s)
	return cpuo
}

// SetAdresse sets the "Adresse" field.
func (cpuo *ContactParentsUpdateOne) SetAdresse(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetAdresse(s)
	return cpuo
}

// SetVille sets the "Ville" field.
func (cpuo *ContactParentsUpdateOne) SetVille(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetVille(s)
	return cpuo
}

// SetCP sets the "CP" field.
func (cpuo *ContactParentsUpdateOne) SetCP(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetCP(s)
	return cpuo
}

// SetEmail sets the "Email" field.
func (cpuo *ContactParentsUpdateOne) SetEmail(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetEmail(s)
	return cpuo
}

// SetTel1 sets the "Tel1" field.
func (cpuo *ContactParentsUpdateOne) SetTel1(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetTel1(s)
	return cpuo
}

// SetTel2 sets the "Tel2" field.
func (cpuo *ContactParentsUpdateOne) SetTel2(s string) *ContactParentsUpdateOne {
	cpuo.mutation.SetTel2(s)
	return cpuo
}

// SetNillableTel2 sets the "Tel2" field if the given value is not nil.
func (cpuo *ContactParentsUpdateOne) SetNillableTel2(s *string) *ContactParentsUpdateOne {
	if s != nil {
		cpuo.SetTel2(*s)
	}
	return cpuo
}

// ClearTel2 clears the value of the "Tel2" field.
func (cpuo *ContactParentsUpdateOne) ClearTel2() *ContactParentsUpdateOne {
	cpuo.mutation.ClearTel2()
	return cpuo
}

// AddChildIDs adds the "child" edge to the Form entity by IDs.
func (cpuo *ContactParentsUpdateOne) AddChildIDs(ids ...int) *ContactParentsUpdateOne {
	cpuo.mutation.AddChildIDs(ids...)
	return cpuo
}

// AddChild adds the "child" edges to the Form entity.
func (cpuo *ContactParentsUpdateOne) AddChild(f ...*Form) *ContactParentsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cpuo.AddChildIDs(ids...)
}

// Mutation returns the ContactParentsMutation object of the builder.
func (cpuo *ContactParentsUpdateOne) Mutation() *ContactParentsMutation {
	return cpuo.mutation
}

// ClearChild clears all "child" edges to the Form entity.
func (cpuo *ContactParentsUpdateOne) ClearChild() *ContactParentsUpdateOne {
	cpuo.mutation.ClearChild()
	return cpuo
}

// RemoveChildIDs removes the "child" edge to Form entities by IDs.
func (cpuo *ContactParentsUpdateOne) RemoveChildIDs(ids ...int) *ContactParentsUpdateOne {
	cpuo.mutation.RemoveChildIDs(ids...)
	return cpuo
}

// RemoveChild removes "child" edges to Form entities.
func (cpuo *ContactParentsUpdateOne) RemoveChild(f ...*Form) *ContactParentsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cpuo.RemoveChildIDs(ids...)
}

// Save executes the query and returns the updated ContactParents entity.
func (cpuo *ContactParentsUpdateOne) Save(ctx context.Context) (*ContactParents, error) {
	var (
		err  error
		node *ContactParents
	)
	if len(cpuo.hooks) == 0 {
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactParentsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ContactParentsUpdateOne) SaveX(ctx context.Context) *ContactParents {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ContactParentsUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ContactParentsUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *ContactParentsUpdateOne) sqlSave(ctx context.Context) (_node *ContactParents, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contactparents.Table,
			Columns: contactparents.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: contactparents.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContactParents.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Nom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldNom,
		})
	}
	if value, ok := cpuo.mutation.Prenom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldPrenom,
		})
	}
	if value, ok := cpuo.mutation.Sexe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldSexe,
		})
	}
	if value, ok := cpuo.mutation.Adresse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldAdresse,
		})
	}
	if value, ok := cpuo.mutation.Ville(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldVille,
		})
	}
	if value, ok := cpuo.mutation.CP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldCP,
		})
	}
	if value, ok := cpuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldEmail,
		})
	}
	if value, ok := cpuo.mutation.Tel1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldTel1,
		})
	}
	if value, ok := cpuo.mutation.Tel2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contactparents.FieldTel2,
		})
	}
	if cpuo.mutation.Tel2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contactparents.FieldTel2,
		})
	}
	if cpuo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedChildIDs(); len(nodes) > 0 && !cpuo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contactparents.ChildTable,
			Columns: []string{contactparents.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContactParents{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contactparents.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
