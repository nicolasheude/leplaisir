// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"dechild/ent/migrate"

	"dechild/ent/contactparents"
	"dechild/ent/form"
	"dechild/ent/stockmanager"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ContactParents is the client for interacting with the ContactParents builders.
	ContactParents *ContactParentsClient
	// Form is the client for interacting with the Form builders.
	Form *FormClient
	// StockManager is the client for interacting with the StockManager builders.
	StockManager *StockManagerClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ContactParents = NewContactParentsClient(c.config)
	c.Form = NewFormClient(c.config)
	c.StockManager = NewStockManagerClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ContactParents: NewContactParentsClient(cfg),
		Form:           NewFormClient(cfg),
		StockManager:   NewStockManagerClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:         cfg,
		ContactParents: NewContactParentsClient(cfg),
		Form:           NewFormClient(cfg),
		StockManager:   NewStockManagerClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ContactParents.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ContactParents.Use(hooks...)
	c.Form.Use(hooks...)
	c.StockManager.Use(hooks...)
}

// ContactParentsClient is a client for the ContactParents schema.
type ContactParentsClient struct {
	config
}

// NewContactParentsClient returns a client for the ContactParents from the given config.
func NewContactParentsClient(c config) *ContactParentsClient {
	return &ContactParentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contactparents.Hooks(f(g(h())))`.
func (c *ContactParentsClient) Use(hooks ...Hook) {
	c.hooks.ContactParents = append(c.hooks.ContactParents, hooks...)
}

// Create returns a create builder for ContactParents.
func (c *ContactParentsClient) Create() *ContactParentsCreate {
	mutation := newContactParentsMutation(c.config, OpCreate)
	return &ContactParentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContactParents entities.
func (c *ContactParentsClient) CreateBulk(builders ...*ContactParentsCreate) *ContactParentsCreateBulk {
	return &ContactParentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContactParents.
func (c *ContactParentsClient) Update() *ContactParentsUpdate {
	mutation := newContactParentsMutation(c.config, OpUpdate)
	return &ContactParentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactParentsClient) UpdateOne(cp *ContactParents) *ContactParentsUpdateOne {
	mutation := newContactParentsMutation(c.config, OpUpdateOne, withContactParents(cp))
	return &ContactParentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactParentsClient) UpdateOneID(id int) *ContactParentsUpdateOne {
	mutation := newContactParentsMutation(c.config, OpUpdateOne, withContactParentsID(id))
	return &ContactParentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContactParents.
func (c *ContactParentsClient) Delete() *ContactParentsDelete {
	mutation := newContactParentsMutation(c.config, OpDelete)
	return &ContactParentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContactParentsClient) DeleteOne(cp *ContactParents) *ContactParentsDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContactParentsClient) DeleteOneID(id int) *ContactParentsDeleteOne {
	builder := c.Delete().Where(contactparents.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactParentsDeleteOne{builder}
}

// Query returns a query builder for ContactParents.
func (c *ContactParentsClient) Query() *ContactParentsQuery {
	return &ContactParentsQuery{config: c.config}
}

// Get returns a ContactParents entity by its id.
func (c *ContactParentsClient) Get(ctx context.Context, id int) (*ContactParents, error) {
	return c.Query().Where(contactparents.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactParentsClient) GetX(ctx context.Context, id int) *ContactParents {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChild queries the child edge of a ContactParents.
func (c *ContactParentsClient) QueryChild(cp *ContactParents) *FormQuery {
	query := &FormQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contactparents.Table, contactparents.FieldID, id),
			sqlgraph.To(form.Table, form.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, contactparents.ChildTable, contactparents.ChildColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactParentsClient) Hooks() []Hook {
	return c.hooks.ContactParents
}

// FormClient is a client for the Form schema.
type FormClient struct {
	config
}

// NewFormClient returns a client for the Form from the given config.
func NewFormClient(c config) *FormClient {
	return &FormClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `form.Hooks(f(g(h())))`.
func (c *FormClient) Use(hooks ...Hook) {
	c.hooks.Form = append(c.hooks.Form, hooks...)
}

// Create returns a create builder for Form.
func (c *FormClient) Create() *FormCreate {
	mutation := newFormMutation(c.config, OpCreate)
	return &FormCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Form entities.
func (c *FormClient) CreateBulk(builders ...*FormCreate) *FormCreateBulk {
	return &FormCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Form.
func (c *FormClient) Update() *FormUpdate {
	mutation := newFormMutation(c.config, OpUpdate)
	return &FormUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormClient) UpdateOne(f *Form) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withForm(f))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormClient) UpdateOneID(id int) *FormUpdateOne {
	mutation := newFormMutation(c.config, OpUpdateOne, withFormID(id))
	return &FormUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Form.
func (c *FormClient) Delete() *FormDelete {
	mutation := newFormMutation(c.config, OpDelete)
	return &FormDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FormClient) DeleteOne(f *Form) *FormDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FormClient) DeleteOneID(id int) *FormDeleteOne {
	builder := c.Delete().Where(form.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormDeleteOne{builder}
}

// Query returns a query builder for Form.
func (c *FormClient) Query() *FormQuery {
	return &FormQuery{config: c.config}
}

// Get returns a Form entity by its id.
func (c *FormClient) Get(ctx context.Context, id int) (*Form, error) {
	return c.Query().Where(form.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormClient) GetX(ctx context.Context, id int) *Form {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContactParents queries the contactParents edge of a Form.
func (c *FormClient) QueryContactParents(f *Form) *ContactParentsQuery {
	query := &ContactParentsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(form.Table, form.FieldID, id),
			sqlgraph.To(contactparents.Table, contactparents.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, form.ContactParentsTable, form.ContactParentsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FormClient) Hooks() []Hook {
	return c.hooks.Form
}

// StockManagerClient is a client for the StockManager schema.
type StockManagerClient struct {
	config
}

// NewStockManagerClient returns a client for the StockManager from the given config.
func NewStockManagerClient(c config) *StockManagerClient {
	return &StockManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stockmanager.Hooks(f(g(h())))`.
func (c *StockManagerClient) Use(hooks ...Hook) {
	c.hooks.StockManager = append(c.hooks.StockManager, hooks...)
}

// Create returns a create builder for StockManager.
func (c *StockManagerClient) Create() *StockManagerCreate {
	mutation := newStockManagerMutation(c.config, OpCreate)
	return &StockManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StockManager entities.
func (c *StockManagerClient) CreateBulk(builders ...*StockManagerCreate) *StockManagerCreateBulk {
	return &StockManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StockManager.
func (c *StockManagerClient) Update() *StockManagerUpdate {
	mutation := newStockManagerMutation(c.config, OpUpdate)
	return &StockManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockManagerClient) UpdateOne(sm *StockManager) *StockManagerUpdateOne {
	mutation := newStockManagerMutation(c.config, OpUpdateOne, withStockManager(sm))
	return &StockManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockManagerClient) UpdateOneID(id int) *StockManagerUpdateOne {
	mutation := newStockManagerMutation(c.config, OpUpdateOne, withStockManagerID(id))
	return &StockManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StockManager.
func (c *StockManagerClient) Delete() *StockManagerDelete {
	mutation := newStockManagerMutation(c.config, OpDelete)
	return &StockManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StockManagerClient) DeleteOne(sm *StockManager) *StockManagerDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StockManagerClient) DeleteOneID(id int) *StockManagerDeleteOne {
	builder := c.Delete().Where(stockmanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockManagerDeleteOne{builder}
}

// Query returns a query builder for StockManager.
func (c *StockManagerClient) Query() *StockManagerQuery {
	return &StockManagerQuery{config: c.config}
}

// Get returns a StockManager entity by its id.
func (c *StockManagerClient) Get(ctx context.Context, id int) (*StockManager, error) {
	return c.Query().Where(stockmanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockManagerClient) GetX(ctx context.Context, id int) *StockManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StockManagerClient) Hooks() []Hook {
	return c.hooks.StockManager
}
